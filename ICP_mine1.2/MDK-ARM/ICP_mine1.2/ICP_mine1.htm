<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [ICP_mine1.2\ICP_mine1.2]</title></head>
<body><HR>
<H1>Static Call Graph for image ICP_mine1.2\ICP_mine1.2</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Mon Apr 09 21:32:02 2018
<BR><P>
<H3>Maximum Stack Usage =      10176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
searcher_C &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[42]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">BusFault_Handler</a><BR>
 <LI><a href="#[28]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">HardFault_Handler</a><BR>
 <LI><a href="#[29]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">MemManage_Handler</a><BR>
 <LI><a href="#[228]">MaskSPIInterrupts</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22c]">Hcd_UnmaskSPIInterrupts</a><BR>
 <LI><a href="#[5f6]">luaD_reallocstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">luaM_toobig</a><BR>
 <LI><a href="#[5fa]">seterrorobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32e]">luaS_newlstr</a><BR>
 <LI><a href="#[277]">luaD_throw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[277]">luaD_throw</a><BR>
 <LI><a href="#[5c0]">luaS_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">luaM_toobig</a><BR>
 <LI><a href="#[58e]">luaH_free</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[58f]">luaE_freethread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[492]">luaF_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[429]">reallymarkobject</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[429]">reallymarkobject</a><BR>
 <LI><a href="#[494]">freestack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[591]">luaE_freeCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[58c]">luaF_freeproto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[58b]">freeobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[58d]">luaC_upvdeccount</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[273]">GCTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[276]">luaO_pushfstring</a><BR>
 <LI><a href="#[601]">luaE_shrinkCI</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[325]">luaM_realloc_</a><BR>
 <LI><a href="#[5fb]">luaD_shrinkstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f6]">luaD_reallocstack</a><BR>
 <LI><a href="#[5b8]">luaD_growstack</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[60b]">luaO_pushvfstring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[276]">luaO_pushfstring</a><BR>
 <LI><a href="#[63b]">luaV_concat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[63c]">luaO_tostring</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32e]">luaS_newlstr</a><BR>
 <LI><a href="#[60c]">luaG_tointerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[60d]">varinfo</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[276]">luaO_pushfstring</a><BR>
 <LI><a href="#[5b0]">kname</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[596]">getobjname</a><BR>
 <LI><a href="#[608]">luaG_opinterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5fd]">luaG_typeerror</a><BR>
 <LI><a href="#[606]">luaG_concaterror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5fd]">luaG_typeerror</a><BR>
 <LI><a href="#[5f4]">luaD_precall</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5fd]">luaG_typeerror</a><BR>
 <LI><a href="#[5f5]">luaV_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[648]">luaV_objlen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5fd]">luaG_typeerror</a><BR>
 <LI><a href="#[609]">luaG_ordererror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60a]">luaT_objtypename</a><BR>
 <LI><a href="#[645]">luaT_callorderTM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[644]">luaT_callbinTM</a><BR>
 <LI><a href="#[440]">luaV_finishget</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5fd]">luaG_typeerror</a><BR>
 <LI><a href="#[3f7]">luaV_equalobj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[643]">luaT_callTM</a><BR>
 <LI><a href="#[614]">luaH_newkey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[3f6]">luaH_set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[614]">luaH_newkey</a><BR>
 <LI><a href="#[539]">luaH_resize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">luaM_toobig</a><BR>
 <LI><a href="#[613]">setnodevector</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[324]">luaM_toobig</a><BR>
 <LI><a href="#[5bb]">luaV_mod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[5bc]">luaV_div</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[5f3]">luaD_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[571]">luaG_runerror</a><BR>
 <LI><a href="#[63a]">pushstr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32e]">luaS_newlstr</a><BR>
 <LI><a href="#[6fe]">xputc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6fe]">xputc</a><BR>
 <LI><a href="#[2b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">UsageFault_Handler</a><BR>
 <LI><a href="#[467]">resizebox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[467]">resizebox</a><BR>
 <LI><a href="#[567]">findfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[567]">findfield</a><BR>
 <LI><a href="#[525]">lexerror</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47a]">save</a><BR>
 <LI><a href="#[6ca]">test_then_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45b]">statlist</a><BR>
 <LI><a href="#[5cf]">skipnoopstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c8]">statement</a><BR>
 <LI><a href="#[52c]">subexpr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52c]">subexpr</a><BR>
 <LI><a href="#[6b0]">yindex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">expr</a><BR>
 <LI><a href="#[6c7]">singlevaraux</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c7]">singlevaraux</a><BR>
 <LI><a href="#[414]">explist</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">expr</a><BR>
 <LI><a href="#[4bf]">recfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">expr</a><BR>
 <LI><a href="#[4bd]">listfield</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">expr</a><BR>
 <LI><a href="#[410]">suffixedexp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">expr</a><BR>
 <LI><a href="#[45f]">body</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45b]">statlist</a><BR>
 <LI><a href="#[6b1]">repeatstat</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45b]">statlist</a><BR>
 <LI><a href="#[459]">block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45b]">statlist</a><BR>
 <LI><a href="#[40d]">assignment</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40d]">assignment</a><BR>
 <LI><a href="#[32c]">LoadProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32a]">LoadFunction</a><BR>
 <LI><a href="#[661]">start_capture</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b5]">match</a><BR>
 <LI><a href="#[664]">max_expand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b5]">match</a><BR>
 <LI><a href="#[5b5]">match</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b5]">match</a><BR>
 <LI><a href="#[26d]">DumpProtos</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26c]">DumpFunction</a><BR>
 <LI><a href="#[44a]">auxsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44a]">auxsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[42]">ADC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[85]">Atheros_Driver_Task</a> from cust_driver_main.o(i.Atheros_Driver_Task) referenced from cust_driver_main.o(i.Custom_Driver_CreateThread)
 <LI><a href="#[2a]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[44]">CAN1_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[45]">CAN1_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[46]">CAN1_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[43]">CAN1_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6e]">CAN2_RX0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6f]">CAN2_RX1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[70]">CAN2_SCE_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6d]">CAN2_TX_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[18]">CDC_Control_FS</a> from usbd_cdc_if.o(i.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[17]">CDC_DeInit_FS</a> from usbd_cdc_if.o(i.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[16]">CDC_Init_FS</a> from usbd_cdc_if.o(i.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[19]">CDC_Receive_FS</a> from usbd_cdc_if.o(i.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[86]">Custom_FreeRxRequest</a> from cust_driver_main.o(i.Custom_FreeRxRequest) referenced from cust_driver_main.o(i.Custom_GetRxRequest)
 <LI><a href="#[3b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[72]">DMA2_Stream5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[73]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[74]">DMA2_Stream7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2d]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[87]">Driver_RxComplete</a> from driver_txrx.o(i.Driver_RxComplete) referenced from driver_main.o(i.Driver_RxReady)
 <LI><a href="#[88]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequest)
 <LI><a href="#[88]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
 <LI><a href="#[36]">EXTI0_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[58]">EXTI15_10_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[37]">EXTI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[38]">EXTI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[39]">EXTI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[3a]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[47]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[34]">FLASH_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[60]">FMC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7d]">FPU_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7c]">HASH_RNG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[28]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[50]">I2C1_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4f]">I2C1_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[52]">I2C2_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[51]">I2C2_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[77]">I2C3_ER_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[76]">I2C3_EV_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[29]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[27]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[71]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[79]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7b]">OTG_HS_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7a]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[31]">PVD_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[93]">RAK_TcpClient_EventHandle1</a> from my_task.o(i.RAK_TcpClient_EventHandle1) referenced from my_task.o(i.creat_tcpcTask1)
 <LI><a href="#[35]">RCC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[59]">RTC_Alarm_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[33]">RTC_WKUP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[26]">Reset_Handler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[61]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[8d]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[8d]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[8c]">SD_DMAReceiveCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[8b]">SD_DMARxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[8e]">SD_DMATransmitCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[8a]">SD_DMATxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[c6]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[ca]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c8]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c7]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[c9]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[63]">SPI3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[2c]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[c3]">StartAppTask</a> from my_task.o(i.StartAppTask) referenced from freertos.o(.constdata)
 <LI><a href="#[c2]">StartDefaultTask</a> from my_task.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[c5]">StartInquireTask</a> from my_task.o(i.StartInquireTask) referenced from freertos.o(.constdata)
 <LI><a href="#[c4]">StartTest_Task</a> from my_task.o(i.StartTest_Task) referenced from freertos.o(.constdata)
 <LI><a href="#[2f]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[7f]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[32]">TAMP_STAMP_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[48]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4b]">TIM1_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[49]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4c]">TIM2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4d]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[4e]">TIM4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[62]">TIM5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[66]">TIM6_DAC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[67]">TIM7_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5e]">TIM8_CC_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[5c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[64]">UART4_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[65]">UART5_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[57]">USART3_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[75]">USART6_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[1e]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1f]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1b]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1d]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[23]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[21]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[20]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[22]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1a]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1c]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[14]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[f]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[15]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[11]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[12]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[13]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[2b]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[30]">WWDG_IRQHandler</a> from startup_stm32f405xx.o(.text) referenced from startup_stm32f405xx.o(RESET)
 <LI><a href="#[80]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f405xx.o(.text)
 <LI><a href="#[b4]">_deinit_interface</a> from rw_lib_platform_os.o(i._deinit_interface) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[b9]">_ext_interrupt</a> from rw_lib_platform_os.o(i._ext_interrupt) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[b3]">_init_interface</a> from rw_lib_platform_os.o(i._init_interface) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[b5]">_power_up_down</a> from rw_lib_platform_os.o(i._power_up_down) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[82]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[81]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[90]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[b6]">_spi_io_buffer</a> from rw_lib_platform_os.o(i._spi_io_buffer) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[91]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[a7]">boxgc</a> from lauxlib.o(i.boxgc) referenced from lauxlib.o(i.luaL_prepbuffsize)
 <LI><a href="#[149]">byteoffset</a> from lutf8lib.o(i.byteoffset) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[14a]">codepoint</a> from lutf8lib.o(i.codepoint) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[bd]">connect_callback</a> from rw_lib_platform_os.o(i.connect_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[bc]">customer_assert</a> from rw_lib_platform_os.o(i.customer_assert) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[e7]">db_debug</a> from ldblib.o(i.db_debug) referenced from ldblib.o(.constdata)
 <LI><a href="#[e9]">db_gethook</a> from ldblib.o(i.db_gethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[ea]">db_getinfo</a> from ldblib.o(i.db_getinfo) referenced from ldblib.o(.constdata)
 <LI><a href="#[eb]">db_getlocal</a> from ldblib.o(i.db_getlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[ed]">db_getmetatable</a> from ldblib.o(i.db_getmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[ec]">db_getregistry</a> from ldblib.o(i.db_getregistry) referenced from ldblib.o(.constdata)
 <LI><a href="#[ee]">db_getupvalue</a> from ldblib.o(i.db_getupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[e8]">db_getuservalue</a> from ldblib.o(i.db_getuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[f2]">db_sethook</a> from ldblib.o(i.db_sethook) referenced from ldblib.o(.constdata)
 <LI><a href="#[f3]">db_setlocal</a> from ldblib.o(i.db_setlocal) referenced from ldblib.o(.constdata)
 <LI><a href="#[f4]">db_setmetatable</a> from ldblib.o(i.db_setmetatable) referenced from ldblib.o(.constdata)
 <LI><a href="#[f5]">db_setupvalue</a> from ldblib.o(i.db_setupvalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[f1]">db_setuservalue</a> from ldblib.o(i.db_setuservalue) referenced from ldblib.o(.constdata)
 <LI><a href="#[f6]">db_traceback</a> from ldblib.o(i.db_traceback) referenced from ldblib.o(.constdata)
 <LI><a href="#[f0]">db_upvalueid</a> from ldblib.o(i.db_upvalueid) referenced from ldblib.o(.constdata)
 <LI><a href="#[ef]">db_upvaluejoin</a> from ldblib.o(i.db_upvaluejoin) referenced from ldblib.o(.constdata)
 <LI><a href="#[b7]">delay_ms</a> from rw_lib_platform_os.o(i.delay_ms) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[9d]">dofilecont</a> from lbaselib.o(i.dofilecont) referenced from lbaselib.o(i.luaB_dofile)
 <LI><a href="#[89]">dothecall</a> from lgc.o(i.dothecall) referenced from lgc.o(i.GCTM)
 <LI><a href="#[aa]">f_call</a> from lapi.o(i.f_call) referenced from lapi.o(i.lua_pcallk)
 <LI><a href="#[10b]">f_flush</a> from liolib.o(i.f_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[111]">f_gc</a> from liolib.o(i.f_gc) referenced from liolib.o(.constdata)
 <LI><a href="#[10c]">f_lines</a> from liolib.o(i.f_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[a9]">f_luaopen</a> from lstate.o(i.f_luaopen) referenced from lstate.o(i.lua_newstate)
 <LI><a href="#[a2]">f_parser</a> from ldo.o(i.f_parser) referenced from ldo.o(i.luaD_protectedparser)
 <LI><a href="#[10d]">f_read</a> from liolib.o(i.f_read) referenced from liolib.o(.constdata)
 <LI><a href="#[10e]">f_seek</a> from liolib.o(i.f_seek) referenced from liolib.o(.constdata)
 <LI><a href="#[10f]">f_setvbuf</a> from liolib.o(i.f_setvbuf) referenced from liolib.o(.constdata)
 <LI><a href="#[112]">f_tostring</a> from liolib.o(i.f_tostring) referenced from liolib.o(.constdata)
 <LI><a href="#[110]">f_write</a> from liolib.o(i.f_write) referenced from liolib.o(.constdata)
 <LI><a href="#[a1]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_pcall)
 <LI><a href="#[a1]">finishpcall</a> from lbaselib.o(i.finishpcall) referenced from lbaselib.o(i.luaB_xpcall)
 <LI><a href="#[8f]">fputc</a> from stm32_lua_config.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[8f]">fputc</a> from stm32_lua_config.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[ad]">gctm</a> from loadlib.o(i.gctm) referenced from loadlib.o(i.luaopen_package)
 <LI><a href="#[9f]">generic_reader</a> from lbaselib.o(i.generic_reader) referenced from lbaselib.o(i.luaB_load)
 <LI><a href="#[a4]">getF</a> from lauxlib.o(i.getF) referenced from lauxlib.o(i.luaL_loadfilex)
 <LI><a href="#[a3]">getS</a> from lauxlib.o(i.getS) referenced from lauxlib.o(i.luaL_loadbufferx)
 <LI><a href="#[b8]">get_stamp</a> from rw_lib_platform_os.o(i.get_stamp) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[136]">gmatch</a> from lstrlib.o(i.gmatch) referenced from lstrlib.o(.constdata)
 <LI><a href="#[98]">gmatch_aux</a> from lstrlib.o(i.gmatch_aux) referenced from lstrlib.o(i.gmatch)
 <LI><a href="#[a8]">growstack</a> from lapi.o(i.growstack) referenced from lapi.o(i.lua_checkstack)
 <LI><a href="#[95]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_gethook)
 <LI><a href="#[95]">hookf</a> from ldblib.o(i.hookf) referenced from ldblib.o(i.db_sethook)
 <LI><a href="#[100]">io_close</a> from liolib.o(i.io_close) referenced 2 times from liolib.o(.constdata)
 <LI><a href="#[af]">io_fclose</a> from liolib.o(i.io_fclose) referenced from liolib.o(i.newfile)
 <LI><a href="#[101]">io_flush</a> from liolib.o(i.io_flush) referenced from liolib.o(.constdata)
 <LI><a href="#[102]">io_input</a> from liolib.o(i.io_input) referenced from liolib.o(.constdata)
 <LI><a href="#[103]">io_lines</a> from liolib.o(i.io_lines) referenced from liolib.o(.constdata)
 <LI><a href="#[94]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.createstdfile)
 <LI><a href="#[94]">io_noclose</a> from liolib.o(i.io_noclose) referenced from liolib.o(i.io_noclose)
 <LI><a href="#[104]">io_open</a> from liolib.o(i.io_open) referenced from liolib.o(.constdata)
 <LI><a href="#[105]">io_output</a> from liolib.o(i.io_output) referenced from liolib.o(.constdata)
 <LI><a href="#[99]">io_pclose</a> from liolib.o(i.io_pclose) referenced from liolib.o(i.io_popen)
 <LI><a href="#[106]">io_popen</a> from liolib.o(i.io_popen) referenced from liolib.o(.constdata)
 <LI><a href="#[107]">io_read</a> from liolib.o(i.io_read) referenced from liolib.o(.constdata)
 <LI><a href="#[92]">io_readline</a> from liolib.o(i.io_readline) referenced from liolib.o(i.aux_lines)
 <LI><a href="#[108]">io_tmpfile</a> from liolib.o(i.io_tmpfile) referenced from liolib.o(.constdata)
 <LI><a href="#[109]">io_type</a> from liolib.o(i.io_type) referenced from liolib.o(.constdata)
 <LI><a href="#[10a]">io_write</a> from liolib.o(i.io_write) referenced from liolib.o(.constdata)
 <LI><a href="#[9e]">ipairsaux</a> from lbaselib.o(i.ipairsaux) referenced from lbaselib.o(i.luaB_ipairs)
 <LI><a href="#[83]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[9a]">iter_aux</a> from lutf8lib.o(i.iter_aux) referenced from lutf8lib.o(i.iter_codes)
 <LI><a href="#[14d]">iter_codes</a> from lutf8lib.o(i.iter_codes) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[a5]">l_alloc</a> from lauxlib.o(i.l_alloc) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[97]">laction</a> from lua_test.o(i.laction) referenced from lua_test.o(i.docall)
 <LI><a href="#[12a]">ll_loadlib</a> from loadlib.o(i.ll_loadlib) referenced from loadlib.o(.constdata)
 <LI><a href="#[12c]">ll_require</a> from loadlib.o(i.ll_require) referenced from loadlib.o(.constdata)
 <LI><a href="#[12b]">ll_searchpath</a> from loadlib.o(i.ll_searchpath) referenced from loadlib.o(.constdata)
 <LI><a href="#[9b]">lstop</a> from lua_test.o(i.lstop) referenced from lua_test.o(i.laction)
 <LI><a href="#[cb]">luaB_assert</a> from lbaselib.o(i.luaB_assert) referenced from lbaselib.o(.constdata)
 <LI><a href="#[9c]">luaB_auxwrap</a> from lcorolib.o(i.luaB_auxwrap) referenced from lcorolib.o(i.luaB_cowrap)
 <LI><a href="#[e0]">luaB_cocreate</a> from lcorolib.o(i.luaB_cocreate) referenced from lcorolib.o(.constdata)
 <LI><a href="#[cc]">luaB_collectgarbage</a> from lbaselib.o(i.luaB_collectgarbage) referenced from lbaselib.o(.constdata)
 <LI><a href="#[e1]">luaB_coresume</a> from lcorolib.o(i.luaB_coresume) referenced from lcorolib.o(.constdata)
 <LI><a href="#[e2]">luaB_corunning</a> from lcorolib.o(i.luaB_corunning) referenced from lcorolib.o(.constdata)
 <LI><a href="#[e3]">luaB_costatus</a> from lcorolib.o(i.luaB_costatus) referenced from lcorolib.o(.constdata)
 <LI><a href="#[e4]">luaB_cowrap</a> from lcorolib.o(i.luaB_cowrap) referenced from lcorolib.o(.constdata)
 <LI><a href="#[cd]">luaB_dofile</a> from lbaselib.o(i.luaB_dofile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[ce]">luaB_error</a> from lbaselib.o(i.luaB_error) referenced from lbaselib.o(.constdata)
 <LI><a href="#[cf]">luaB_getmetatable</a> from lbaselib.o(i.luaB_getmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d0]">luaB_ipairs</a> from lbaselib.o(i.luaB_ipairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d2]">luaB_load</a> from lbaselib.o(i.luaB_load) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d1]">luaB_loadfile</a> from lbaselib.o(i.luaB_loadfile) referenced from lbaselib.o(.constdata)
 <LI><a href="#[a0]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(.constdata)
 <LI><a href="#[a0]">luaB_next</a> from lbaselib.o(i.luaB_next) referenced from lbaselib.o(i.luaB_pairs)
 <LI><a href="#[d3]">luaB_pairs</a> from lbaselib.o(i.luaB_pairs) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d4]">luaB_pcall</a> from lbaselib.o(i.luaB_pcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d5]">luaB_print</a> from lbaselib.o(i.luaB_print) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d6]">luaB_rawequal</a> from lbaselib.o(i.luaB_rawequal) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d8]">luaB_rawget</a> from lbaselib.o(i.luaB_rawget) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d7]">luaB_rawlen</a> from lbaselib.o(i.luaB_rawlen) referenced from lbaselib.o(.constdata)
 <LI><a href="#[d9]">luaB_rawset</a> from lbaselib.o(i.luaB_rawset) referenced from lbaselib.o(.constdata)
 <LI><a href="#[da]">luaB_select</a> from lbaselib.o(i.luaB_select) referenced from lbaselib.o(.constdata)
 <LI><a href="#[db]">luaB_setmetatable</a> from lbaselib.o(i.luaB_setmetatable) referenced from lbaselib.o(.constdata)
 <LI><a href="#[dc]">luaB_tonumber</a> from lbaselib.o(i.luaB_tonumber) referenced from lbaselib.o(.constdata)
 <LI><a href="#[dd]">luaB_tostring</a> from lbaselib.o(i.luaB_tostring) referenced from lbaselib.o(.constdata)
 <LI><a href="#[de]">luaB_type</a> from lbaselib.o(i.luaB_type) referenced from lbaselib.o(.constdata)
 <LI><a href="#[df]">luaB_xpcall</a> from lbaselib.o(i.luaB_xpcall) referenced from lbaselib.o(.constdata)
 <LI><a href="#[e5]">luaB_yield</a> from lcorolib.o(i.luaB_yield) referenced from lcorolib.o(.constdata)
 <LI><a href="#[e6]">luaB_yieldable</a> from lcorolib.o(i.luaB_yieldable) referenced from lcorolib.o(.constdata)
 <LI><a href="#[ae]">lua_newstate</a> from lstate.o(i.lua_newstate) referenced from lstate.o(i.makeseed)
 <LI><a href="#[f7]">luaopen_base</a> from lbaselib.o(i.luaopen_base) referenced from linit.o(.constdata)
 <LI><a href="#[f9]">luaopen_coroutine</a> from lcorolib.o(i.luaopen_coroutine) referenced from linit.o(.constdata)
 <LI><a href="#[ff]">luaopen_debug</a> from ldblib.o(i.luaopen_debug) referenced from linit.o(.constdata)
 <LI><a href="#[fb]">luaopen_io</a> from liolib.o(i.luaopen_io) referenced from linit.o(.constdata)
 <LI><a href="#[fd]">luaopen_math</a> from lmathlib.o(i.luaopen_math) referenced from linit.o(.constdata)
 <LI><a href="#[f8]">luaopen_package</a> from loadlib.o(i.luaopen_package) referenced from linit.o(.constdata)
 <LI><a href="#[fc]">luaopen_string</a> from lstrlib.o(i.luaopen_string) referenced from linit.o(.constdata)
 <LI><a href="#[fa]">luaopen_table</a> from ltablib.o(i.luaopen_table) referenced from linit.o(.constdata)
 <LI><a href="#[fe]">luaopen_utf8</a> from lutf8lib.o(i.luaopen_utf8) referenced from linit.o(.constdata)
 <LI><a href="#[7e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[113]">math_abs</a> from lmathlib.o(i.math_abs) referenced from lmathlib.o(.constdata)
 <LI><a href="#[114]">math_acos</a> from lmathlib.o(i.math_acos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[115]">math_asin</a> from lmathlib.o(i.math_asin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[116]">math_atan</a> from lmathlib.o(i.math_atan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[117]">math_ceil</a> from lmathlib.o(i.math_ceil) referenced from lmathlib.o(.constdata)
 <LI><a href="#[118]">math_cos</a> from lmathlib.o(i.math_cos) referenced from lmathlib.o(.constdata)
 <LI><a href="#[119]">math_deg</a> from lmathlib.o(i.math_deg) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11a]">math_exp</a> from lmathlib.o(i.math_exp) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11c]">math_floor</a> from lmathlib.o(i.math_floor) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11d]">math_fmod</a> from lmathlib.o(i.math_fmod) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11f]">math_log</a> from lmathlib.o(i.math_log) referenced from lmathlib.o(.constdata)
 <LI><a href="#[120]">math_max</a> from lmathlib.o(i.math_max) referenced from lmathlib.o(.constdata)
 <LI><a href="#[121]">math_min</a> from lmathlib.o(i.math_min) referenced from lmathlib.o(.constdata)
 <LI><a href="#[122]">math_modf</a> from lmathlib.o(i.math_modf) referenced from lmathlib.o(.constdata)
 <LI><a href="#[123]">math_rad</a> from lmathlib.o(i.math_rad) referenced from lmathlib.o(.constdata)
 <LI><a href="#[124]">math_random</a> from lmathlib.o(i.math_random) referenced from lmathlib.o(.constdata)
 <LI><a href="#[125]">math_randomseed</a> from lmathlib.o(i.math_randomseed) referenced from lmathlib.o(.constdata)
 <LI><a href="#[126]">math_sin</a> from lmathlib.o(i.math_sin) referenced from lmathlib.o(.constdata)
 <LI><a href="#[127]">math_sqrt</a> from lmathlib.o(i.math_sqrt) referenced from lmathlib.o(.constdata)
 <LI><a href="#[128]">math_tan</a> from lmathlib.o(i.math_tan) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11b]">math_toint</a> from lmathlib.o(i.math_toint) referenced from lmathlib.o(.constdata)
 <LI><a href="#[129]">math_type</a> from lmathlib.o(i.math_type) referenced from lmathlib.o(.constdata)
 <LI><a href="#[11e]">math_ult</a> from lmathlib.o(i.math_ult) referenced from lmathlib.o(.constdata)
 <LI><a href="#[96]">msghandler</a> from lua_test.o(i.msghandler) referenced from lua_test.o(i.docall)
 <LI><a href="#[24]">my_mem_init</a> from my_malloc.o(i.my_mem_init) referenced 2 times from my_malloc.o(.data)
 <LI><a href="#[25]">my_mem_perused</a> from my_malloc.o(i.my_mem_perused) referenced 2 times from my_malloc.o(.data)
 <LI><a href="#[144]">pack</a> from ltablib.o(i.pack) referenced from ltablib.o(.constdata)
 <LI><a href="#[a6]">panic</a> from lauxlib.o(i.panic) referenced from lauxlib.o(i.luaL_newstate)
 <LI><a href="#[b2]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[b0]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[bb]">pvPortMalloc</a> from heap_4.o(i.pvPortMalloc) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[84]">query_credit_deficit</a> from api_txrx.o(i.query_credit_deficit) referenced from api_txrx.o(i.Api_TxGetStatus)
 <LI><a href="#[ab]">resume</a> from ldo.o(i.resume) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[be]">scan_callback</a> from rw_lib_platform_os.o(i.scan_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[12f]">searcher_C</a> from loadlib.o(i.searcher_C) referenced from loadlib.o(.constdata)
 <LI><a href="#[130]">searcher_Croot</a> from loadlib.o(i.searcher_Croot) referenced from loadlib.o(.constdata)
 <LI><a href="#[12e]">searcher_Lua</a> from loadlib.o(i.searcher_Lua) referenced from loadlib.o(.constdata)
 <LI><a href="#[12d]">searcher_preload</a> from loadlib.o(i.searcher_preload) referenced from loadlib.o(.constdata)
 <LI><a href="#[148]">sort</a> from ltablib.o(i.sort) referenced from ltablib.o(.constdata)
 <LI><a href="#[131]">str_byte</a> from lstrlib.o(i.str_byte) referenced from lstrlib.o(.constdata)
 <LI><a href="#[132]">str_char</a> from lstrlib.o(i.str_char) referenced from lstrlib.o(.constdata)
 <LI><a href="#[133]">str_dump</a> from lstrlib.o(i.str_dump) referenced from lstrlib.o(.constdata)
 <LI><a href="#[134]">str_find</a> from lstrlib.o(i.str_find) referenced from lstrlib.o(.constdata)
 <LI><a href="#[135]">str_format</a> from lstrlib.o(i.str_format) referenced from lstrlib.o(.constdata)
 <LI><a href="#[137]">str_gsub</a> from lstrlib.o(i.str_gsub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[138]">str_len</a> from lstrlib.o(i.str_len) referenced from lstrlib.o(.constdata)
 <LI><a href="#[139]">str_lower</a> from lstrlib.o(i.str_lower) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13a]">str_match</a> from lstrlib.o(i.str_match) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13f]">str_pack</a> from lstrlib.o(i.str_pack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[140]">str_packsize</a> from lstrlib.o(i.str_packsize) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13b]">str_rep</a> from lstrlib.o(i.str_rep) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13c]">str_reverse</a> from lstrlib.o(i.str_reverse) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13d]">str_sub</a> from lstrlib.o(i.str_sub) referenced from lstrlib.o(.constdata)
 <LI><a href="#[141]">str_unpack</a> from lstrlib.o(i.str_unpack) referenced from lstrlib.o(.constdata)
 <LI><a href="#[13e]">str_upper</a> from lstrlib.o(i.str_upper) referenced from lstrlib.o(.constdata)
 <LI><a href="#[142]">tconcat</a> from ltablib.o(i.tconcat) referenced from ltablib.o(.constdata)
 <LI><a href="#[143]">tinsert</a> from ltablib.o(i.tinsert) referenced from ltablib.o(.constdata)
 <LI><a href="#[147]">tmove</a> from ltablib.o(i.tmove) referenced from ltablib.o(.constdata)
 <LI><a href="#[146]">tremove</a> from ltablib.o(i.tremove) referenced from ltablib.o(.constdata)
 <LI><a href="#[145]">unpack</a> from ltablib.o(i.unpack) referenced from ltablib.o(.constdata)
 <LI><a href="#[ac]">unroll</a> from ldo.o(i.unroll) referenced from ldo.o(i.lua_resume)
 <LI><a href="#[14b]">utfchar</a> from lutf8lib.o(i.utfchar) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[14c]">utflen</a> from lutf8lib.o(i.utflen) referenced from lutf8lib.o(.constdata)
 <LI><a href="#[ba]">vPortFree</a> from heap_4.o(i.vPortFree) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[bf]">wps_easy_callback</a> from rw_lib_platform_os.o(i.wps_easy_callback) referenced from rw_lib_platform_os.o(i.wifi_init_params)
 <LI><a href="#[b1]">writer</a> from lstrlib.o(i.writer) referenced from lstrlib.o(i.str_dump)
 <LI><a href="#[c1]">x_uart_getc</a> from xprint_init.o(i.x_uart_getc) referenced from xprint_init.o(i.x_printf_init)
 <LI><a href="#[c0]">x_uart_putc</a> from xprint_init.o(i.x_uart_putc) referenced from xprint_init.o(i.x_printf_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[700]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[170]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[701]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[702]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[703]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[704]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[705]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2c]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6f7]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6f6]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2e]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6d9]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[26]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f405xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[706]"></a>_fgetc$ungetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc_u.o(.text), UNUSED)

<P><STRONG><a name="[59b]"></a>ungetc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fgetc_u.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[2]"></a>fflush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fflush.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_version
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_message
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[707]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[708]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[83]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[456]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
</UL>

<P><STRONG><a name="[666]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>

<P><STRONG><a name="[348]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
</UL>

<P><STRONG><a name="[347]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
</UL>

<P><STRONG><a name="[403]"></a>localeconv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, localeconv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[517]"></a>signal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laction
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
</UL>

<P><STRONG><a name="[709]"></a>raise</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, signal.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[70a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[70b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[70d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[669]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[62b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
</UL>

<P><STRONG><a name="[20e]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[47f]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[20f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[15a]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>

<P><STRONG><a name="[402]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[1fc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[159]"></a>strcoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
</UL>

<P><STRONG><a name="[1de]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[20d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[455]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
</UL>

<P><STRONG><a name="[5c9]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>

<P><STRONG><a name="[523]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
</UL>

<P><STRONG><a name="[6d0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[31b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[318]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[600]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>

<P><STRONG><a name="[602]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>

<P><STRONG><a name="[70e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[70f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[710]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[711]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[712]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[713]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[15d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[3bb]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[714]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[16d]"></a>_drem</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[715]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[173]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[81]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[716]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[717]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>AD7606_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ad7606.o(i.AD7606_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD7606_Init &rArr; AD7606_SetOsRate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_queue
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetOsRate
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>AD7606_Read4CH</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, ad7606.o(i.AD7606_Read4CH))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD7606_Read4CH &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[176]"></a>AD7606_SetOsRate</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ad7606.o(i.AD7606_SetOsRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD7606_SetOsRate &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
</UL>

<P><STRONG><a name="[17d]"></a>AD7606_handle</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ad7606.o(i.AD7606_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD7606_handle &rArr; AD7606_Read4CH &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[181]"></a>AD7606_rst</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ad7606.o(i.AD7606_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AD7606_rst &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_rst_handle
</UL>

<P><STRONG><a name="[184]"></a>AD_CONVEST_PWM_Init</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ad7606.o(i.AD_CONVEST_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AD_CONVEST_PWM_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>AD_rst_handle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad7606.o(i.AD_rst_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AD_rst_handle &rArr; AD7606_rst &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[18b]"></a>Api_AggrRecvAddbaReqEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvAddbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>

<P><STRONG><a name="[18d]"></a>Api_AggrRecvDelbaReqEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvDelbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
</UL>

<P><STRONG><a name="[18f]"></a>Api_BssInfoEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
</UL>

<P><STRONG><a name="[191]"></a>Api_ConnectEvent</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_ConnectEvent &rArr; Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
</UL>

<P><STRONG><a name="[196]"></a>Api_ConnectWiFi</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, api_ioctl.o(i.Api_ConnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_static_wep_keys
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[19d]"></a>Api_DataTxStart</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_txrx.o(i.Api_DataTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_AC2EndpointID
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[1a4]"></a>Api_DeInitFinish</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api_init.o(i.Api_DeInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[202]"></a>Api_DeInitStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_init.o(i.Api_DeInitStart))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[1a7]"></a>Api_DisconnectEvent</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
</UL>

<P><STRONG><a name="[1aa]"></a>Api_DisconnectWiFi</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, api_ioctl.o(i.Api_DisconnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Api_DisconnectWiFi &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[19f]"></a>Api_DriverAccessCheck</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, api_ioctl.o(i.Api_DriverAccessCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[1ac]"></a>Api_GetPmkEvent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_GetPmkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
</UL>

<P><STRONG><a name="[1af]"></a>Api_InitFinish</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_init.o(i.Api_InitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_InitFinish &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[1b0]"></a>Api_InitStart</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_init.o(i.Api_InitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_InitStart &rArr; socket_context_init &rArr; custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[1b3]"></a>Api_ParseInfoElem</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, api_ioctl.o(i.Api_ParseInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>

<P><STRONG><a name="[1b6]"></a>Api_RSNASuccessEvent</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
</UL>

<P><STRONG><a name="[1b8]"></a>Api_ReadyEvent</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, api_wmi_rx.o(i.Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
</UL>

<P><STRONG><a name="[6f4]"></a>Api_RegDomainEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_wmi_rx.o(i.Api_RegDomainEvent))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
</UL>

<P><STRONG><a name="[1ba]"></a>Api_RxComplete</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, api_txrx.o(i.Api_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[1c2]"></a>Api_ScanCompleteEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_ScanCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
</UL>

<P><STRONG><a name="[1c4]"></a>Api_SockResponseEventRx</STRONG> (Thumb, 762 bytes, Stack size 56 bytes, api_stack_offload.o(i.Api_SockResponseEventRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_SockResponseEventRx &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1c8]"></a>Api_TargetStatsEvent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_TargetStatsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
</UL>

<P><STRONG><a name="[1c9]"></a>Api_TkipMicErrorEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_TkipMicErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
</UL>

<P><STRONG><a name="[1ca]"></a>Api_TxComplete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[1cc]"></a>Api_TxGetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_TxGetStatus &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1ce]"></a>Api_WMIInitFinish</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, api_init.o(i.Api_WMIInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_WMIInitFinish &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[1d2]"></a>Api_WmiTxStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, api_txrx.o(i.Api_WmiTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[1d4]"></a>Api_WpsProfileEvent</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, api_wmi_rx.o(i.Api_WpsProfileEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
</UL>

<P><STRONG><a name="[1d6]"></a>Api_bind</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
</UL>

<P><STRONG><a name="[1da]"></a>Api_connect</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
</UL>

<P><STRONG><a name="[1db]"></a>Api_easyconfigEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
</UL>

<P><STRONG><a name="[1dd]"></a>Api_ipconfig</STRONG> (Thumb, 326 bytes, Stack size 192 bytes, api_stack_offload.o(i.Api_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>

<P><STRONG><a name="[1df]"></a>Api_ipconfig_dhcp_pool</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
</UL>

<P><STRONG><a name="[1e0]"></a>Api_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>

<P><STRONG><a name="[1e1]"></a>Api_shutdown</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, api_stack_offload.o(i.Api_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
</UL>

<P><STRONG><a name="[1e3]"></a>Api_socket</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, api_stack_offload.o(i.Api_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>

<P><STRONG><a name="[1e7]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[1e9]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[1eb]"></a>BSP_SD_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[1ee]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[1f0]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[2a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[1f2]"></a>Bus_InOutDescriptorSet</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutDescriptorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>

<P><STRONG><a name="[229]"></a>Bus_InOutToken</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[190]"></a>Custom_Api_BssInfoEvent</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cust_api_wmi_rx.o(i.Custom_Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>

<P><STRONG><a name="[195]"></a>Custom_Api_ConnectEvent</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, cust_api_wmi_rx.o(i.Custom_Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[1a8]"></a>Custom_Api_DisconnectEvent</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_Api_DisconnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[1b7]"></a>Custom_Api_RSNASuccessEvent</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>

<P><STRONG><a name="[1b9]"></a>Custom_Api_ReadyEvent</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cust_api_wmi_rx.o(i.Custom_Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>

<P><STRONG><a name="[200]"></a>Custom_Api_Shutdown</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cust_api_init.o(i.Custom_Api_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Custom_Api_Shutdown &rArr; Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
</UL>

<P><STRONG><a name="[207]"></a>Custom_Api_Start</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cust_api_init.o(i.Custom_Api_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[1dc]"></a>Custom_Api_easyconfigEvent</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>

<P><STRONG><a name="[1c0]"></a>Custom_DeliverFrameToNetworkStack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cust_api_stack_txrx.o(i.Custom_DeliverFrameToNetworkStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Custom_DeliverFrameToNetworkStack &rArr; custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[211]"></a>Custom_Driver_ContextDeInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>

<P><STRONG><a name="[215]"></a>Custom_Driver_ContextInit</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_set_rx_pool
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>

<P><STRONG><a name="[20c]"></a>Custom_Driver_CreateThread</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cust_driver_main.o(i.Custom_Driver_CreateThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Custom_Driver_CreateThread &rArr; rw_creat_task &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[203]"></a>Custom_Driver_DestroyThread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_DestroyThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Custom_Driver_DestroyThread &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[21b]"></a>Custom_Driver_Interrupt_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_Interrupt_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
</UL>

<P><STRONG><a name="[19e]"></a>Custom_Driver_WaitForCondition</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_WaitForCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[1cd]"></a>Custom_Driver_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>

<P><STRONG><a name="[1ae]"></a>Custom_Driver_WakeUser</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[213]"></a>Custom_GetRxRequest</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_GetRxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_GetRxRequest &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_tailroom
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[6b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[224]"></a>DRIVER_INT_HANDLE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_isr.o(i.DRIVER_INT_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[2d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[22e]"></a>Driver_BootComm</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, driver_init.o(i.Driver_BootComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[232]"></a>Driver_CompleteRequest</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, driver_main.o(i.Driver_CompleteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[1a5]"></a>Driver_ContextDeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[1b1]"></a>Driver_ContextInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[1e6]"></a>Driver_DeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, driver_init.o(i.Driver_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Driver_DeInit &rArr; wmi_shutdown &rArr; rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DeInit
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_deinit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[23b]"></a>Driver_DropTxDataPackets</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, driver_main.o(i.Driver_DropTxDataPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Driver_DropTxDataPackets &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[241]"></a>Driver_GetTargetInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_init.o(i.Driver_GetTargetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[20b]"></a>Driver_Init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, driver_init.o(i.Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_GetTargetInfo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[1e5]"></a>Driver_Main</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, driver_main.o(i.Driver_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[22f]"></a>Driver_ReadDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_ReadDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_ReadDataDiag &rArr; Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[24e]"></a>Driver_ReadRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_ReadRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>

<P><STRONG><a name="[24b]"></a>Driver_RecvPacket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Driver_RecvPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[21f]"></a>Driver_ReportRxBuffStatus</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, driver_main.o(i.Driver_ReportRxBuffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[87]"></a>Driver_RxComplete</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Driver_RxComplete &rArr; Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_main.o(i.Driver_RxReady)
</UL>
<P><STRONG><a name="[24a]"></a>Driver_RxReady</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, driver_main.o(i.Driver_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Driver_RxReady &rArr; Custom_GetRxRequest &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[24d]"></a>Driver_SendPacket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Driver_SendPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[1a3]"></a>Driver_SubmitTxRequest</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SubmitTxRequest &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[1d3]"></a>Driver_SubmitTxRequestNoBlock</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequestNoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SubmitTxRequestNoBlock &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>

<P><STRONG><a name="[24c]"></a>Driver_TxReady</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, driver_main.o(i.Driver_TxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[230]"></a>Driver_WriteDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_WriteDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[263]"></a>Driver_WriteRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_WriteRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
</UL>

<P><STRONG><a name="[3a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[180]"></a>EnQueue</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, my_queue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[271]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[272]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[225]"></a>GetDriverContextByInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextByInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>

<P><STRONG><a name="[201]"></a>GetDriverContextPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[350]"></a>GetQueue_length</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, my_queue.o(i.GetQueue_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetQueue_length
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[278]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[279]"></a>HAL_ADC_Init</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[27a]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[2dd]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[223]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>HAL_DMA_Init</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_DMA_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[280]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_DMA_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[182]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_rst
</UL>

<P><STRONG><a name="[282]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[283]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[27b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 638 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[284]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_ReadPin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_init
</UL>

<P><STRONG><a name="[285]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[179]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_rst
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_SetOsRate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[27d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[30a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[286]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[288]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[289]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[28b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[28a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>

<P><STRONG><a name="[287]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[387]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[388]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[291]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[29b]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[386]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[29d]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[29f]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1196 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2b9]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_PCD_Init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2b5]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2af]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2c7]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_PCD_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[28c]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[371]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[28d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1118 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_OscConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2de]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[365]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 474 bytes, Stack size 20 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_SD_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_SD_InitCard</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2df]"></a>HAL_SD_MspInit</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, sdio.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2d9]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2da]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd_diskio.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2eb]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deinit_interface
</UL>

<P><STRONG><a name="[17a]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_SPI_Init</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[17b]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[301]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[28e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[28f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 1234 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[2fb]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[2fc]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_PWM_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[306]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[2fd]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[307]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[309]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[300]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[30b]"></a>HAL_UART_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
</UL>

<P><STRONG><a name="[30c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1fa]"></a>HTC_ConnectService</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, htc.o(i.HTC_ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[249]"></a>HTC_ProcessCpuInterrupt</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, htc.o(i.HTC_ProcessCpuInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTC_ProcessCpuInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[246]"></a>HTC_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, htc.o(i.HTC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HTC_Start &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[244]"></a>HTC_WaitTarget</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, htc.o(i.HTC_WaitTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HTC_WaitTarget &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[237]"></a>HW_DeInit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hw_api.o(i.HW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[270]"></a>HW_EnableDisableSPIIRQ</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hw_api.o(i.HW_EnableDisableSPIIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
</UL>

<P><STRONG><a name="[23f]"></a>HW_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_api.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[226]"></a>HW_InterruptHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_api.o(i.HW_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HW_InterruptHandler &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>

<P><STRONG><a name="[1a9]"></a>HW_MsecDelay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hw_api.o(i.HW_MsecDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_MsecDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[236]"></a>HW_PowerUpDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hw_api.o(i.HW_PowerUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_PowerUpDown &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[28]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>Hcd_ClearCPUInterrupt</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, spi_hcd.o(i.Hcd_ClearCPUInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Hcd_ClearCPUInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[235]"></a>Hcd_Deinitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_hcd.o(i.Hcd_Deinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[251]"></a>Hcd_DoPioExternalAccess</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioExternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[258]"></a>Hcd_DoPioInternalAccess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioInternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_DoPioInternalAccess &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[259]"></a>Hcd_GetLookAhead</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_GetLookAhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_GetLookAhead &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[253]"></a>Hcd_GetMboxAddress</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_GetMboxAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hcd_GetMboxAddress &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[240]"></a>Hcd_Init</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Hcd_Init &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[262]"></a>Hcd_ProgramWriteBufferWaterMark</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spi_hcd.o(i.Hcd_ProgramWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hcd_ProgramWriteBufferWaterMark &rArr; Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[261]"></a>Hcd_RefreshWriteBufferSpace</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_RefreshWriteBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hcd_RefreshWriteBufferSpace &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[254]"></a>Hcd_Request</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Hcd_Request &rArr; DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[247]"></a>Hcd_SpiInterrupt</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_SpiInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Hcd_SpiInterrupt &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[22c]"></a>Hcd_UnmaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_UnmaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_UnmaskSPIInterrupts &rArr; MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[260]"></a>Htc_GetCreditCounterUpdate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, htc.o(i.Htc_GetCreditCounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[252]"></a>Htc_PrepareRecvPacket</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, htc.o(i.Htc_PrepareRecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Htc_PrepareRecvPacket &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[256]"></a>Htc_ProcessRecvHeader</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, htc.o(i.Htc_ProcessRecvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Htc_ProcessRecvHeader &rArr; Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[25e]"></a>Htc_ProcessTxComplete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, htc.o(i.Htc_ProcessTxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessTxComplete &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[311]"></a>Htc_ReadCreditCounter</STRONG> (Thumb, 80 bytes, Stack size 104 bytes, htc.o(i.Htc_ReadCreditCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
</UL>

<P><STRONG><a name="[257]"></a>Htc_RxComplete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, htc.o(i.Htc_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Htc_RxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[25a]"></a>Htc_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, htc.o(i.Htc_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_SendPacket &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
</UL>

<P><STRONG><a name="[177]"></a>Init_queue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_queue.o(i.Init_queue))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
</UL>

<P><STRONG><a name="[17f]"></a>LED_Toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.LED_Toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LED_Toggle &rArr; HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[330]"></a>MX_ADC1_Init</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[331]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[332]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MX_FATFS_Init &rArr; FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[333]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[336]"></a>MX_GPIO_Init</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65d]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdio.o(i.MX_SDIO_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[337]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[338]"></a>MX_SPI3_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
</UL>

<P><STRONG><a name="[339]"></a>MX_TIM2_Init</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33a]"></a>MX_TIM3_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_ConfigClockSource &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33b]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33c]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[342]"></a>PowerOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PowerOff &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>PowerOn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PowerOn &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[344]"></a>RAK_TcpClient</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, tcp_udp.o(i.RAK_TcpClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = RAK_TcpClient &rArr; connect &rArr; t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[93]"></a>RAK_TcpClient_EventHandle1</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, my_task.o(i.RAK_TcpClient_EventHandle1))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = RAK_TcpClient_EventHandle1 &rArr; send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQueue_n
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQueue_length
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_task.o(i.creat_tcpcTask1)
</UL>
<P><STRONG><a name="[351]"></a>ReadQueue_n</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, my_queue.o(i.ReadQueue_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadQueue_n
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[2e4]"></a>SDIO_ConfigData</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_ConfigData &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[364]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2d5]"></a>SDIO_GetResponse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[61]"></a>SDIO_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDIO_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2d3]"></a>SDIO_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2e1]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2dc]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[353]"></a>SDIO_SendCommand</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[2db]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[354]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[356]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdAppOperCommand &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2e5]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[358]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdBusWidth &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[359]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdGoIdleState &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[35a]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdOperCond &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[2e6]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2e7]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[35b]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[35c]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdSendCID &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[35e]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDMMC_CmdSendCSD &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[35f]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2d4]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[360]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[2d7]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[2e9]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2ea]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[c6]"></a>SD_initialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>SD_ioctl</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>SD_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>SD_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>StartAppTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_task.o(i.StartAppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = StartAppTask &rArr; test_netWorkTask &rArr; rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>StartDefaultTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_task.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = StartDefaultTask &rArr; get_xtask_state &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>StartInquireTask</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, my_task.o(i.StartInquireTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = StartInquireTask &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_rst_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>StartTest_Task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, my_task.o(i.StartTest_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = StartTest_Task &rArr; do_file_script1 &rArr; luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[370]"></a>SystemClock_Config</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[2f4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[308]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM_CCxChannelCmd &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[303]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC2_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[23]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1f6]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
</UL>

<P><STRONG><a name="[33f]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1f5]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
</UL>

<P><STRONG><a name="[1f4]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[37a]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbSendData
</UL>

<P><STRONG><a name="[390]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[37c]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[37d]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[37e]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[378]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[380]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[379]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[381]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[14]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[382]"></a>USBD_GetString</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[33d]"></a>USBD_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[385]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[373]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[294]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[296]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[292]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[298]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[372]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[384]"></a>USBD_LL_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[392]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[2ba]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[2bb]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[375]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[377]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[2c4]"></a>USBD_LL_Reset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[2c5]"></a>USBD_LL_Resume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[2c6]"></a>USBD_LL_SOF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[2c3]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[389]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[2c9]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[37f]"></a>USBD_LL_StallEP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>

<P><STRONG><a name="[38e]"></a>USBD_LL_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[2cd]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[37b]"></a>USBD_LL_Transmit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>

<P><STRONG><a name="[38a]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[33e]"></a>USBD_RegisterClass</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[391]"></a>USBD_SetClassConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SetClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[340]"></a>USBD_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start &rArr; USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[38b]"></a>USBD_StdDevReq</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdDevReq &rArr; USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[38d]"></a>USBD_StdEPReq</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[38c]"></a>USBD_StdItfReq</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[29e]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[2b2]"></a>USB_ActivateSetup</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>USB_CoreInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[29a]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[2cb]"></a>USB_DevConnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevConnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[2c2]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2c1]"></a>USB_DevInit</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DevInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2be]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2a1]"></a>USB_EP0StartXfer</STRONG> (Thumb, 316 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[2a4]"></a>USB_EP0_OutStart</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[29c]"></a>USB_EPClearStall</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[2a3]"></a>USB_EPSetStall</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[2a0]"></a>USB_EPStartXfer</STRONG> (Thumb, 534 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[2cc]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[394]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[2b1]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>

<P><STRONG><a name="[2b3]"></a>USB_GetDevSpeed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2ac]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2a9]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2ad]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2aa]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2a8]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>USB_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[2c0]"></a>USB_SetCurrentMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[2c8]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[341]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[2b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f405xx.o(RESET)
</UL>
<P><STRONG><a name="[36d]"></a>UsbReceiveData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.UsbReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UsbReceiveData &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
</UL>

<P><STRONG><a name="[17e]"></a>UsbSendData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.UsbSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UsbSendData &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_handle
</UL>

<P><STRONG><a name="[1a2]"></a>Util_AC2EndpointID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util.o(i.Util_AC2EndpointID))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[1b4]"></a>Util_Freq2ieee</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, util.o(i.Util_Freq2ieee))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[25f]"></a>Util_GetEndpoint</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i.Util_GetEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[424]"></a>Util_Ieee2freq</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, util.o(i.Util_Ieee2freq))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[395]"></a>WIFI_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bsp.o(i.WIFI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WIFI_GPIO_Init &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[396]"></a>WIFI_SPI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.WIFI_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WIFI_SPI_Init &rArr; MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_interface
</UL>

<P><STRONG><a name="[186]"></a>_Error_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _Error_Handler &rArr; HAL_GPIO_TogglePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[397]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[718]"></a>__1fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[4da]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_message
</UL>

<P><STRONG><a name="[719]"></a>__c89fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[71a]"></a>fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0fprintf), UNUSED)

<P><STRONG><a name="[399]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[34d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[71c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[71d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[39a]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[400]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[71f]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[720]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[39b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[721]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[5a2]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[722]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[723]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3a3]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[522]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
</UL>

<P><STRONG><a name="[724]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[39c]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_acos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
</UL>

<P><STRONG><a name="[3a2]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
</UL>

<P><STRONG><a name="[3a6]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[3a7]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[3aa]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[3ab]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
</UL>

<P><STRONG><a name="[3af]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
</UL>

<P><STRONG><a name="[667]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
</UL>

<P><STRONG><a name="[3b1]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
</UL>

<P><STRONG><a name="[3b2]"></a>__hardfp_fmod</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fmod.o(i.__hardfp_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_fmod &rArr; _drem &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
</UL>

<P><STRONG><a name="[3b3]"></a>__hardfp_frexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, frexp.o(i.__hardfp_frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[3b4]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[3b6]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[3b8]"></a>__hardfp_log2</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, log2.o(i.__hardfp_log2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_log2 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
</UL>

<P><STRONG><a name="[3ba]"></a>__hardfp_pow</STRONG> (Thumb, 3044 bytes, Stack size 184 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
</UL>

<P><STRONG><a name="[3bc]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
</UL>

<P><STRONG><a name="[3bd]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
</UL>

<P><STRONG><a name="[3be]"></a>__hardfp_strtod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
</UL>

<P><STRONG><a name="[3bf]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
</UL>

<P><STRONG><a name="[3ac]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3ae]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3a0]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3ad]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3c0]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3b5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[39d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3a8]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[39f]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[3b0]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[3a4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[725]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[726]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[727]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[39e]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[3d9]"></a>_ascii_to_hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib.o(i._ascii_to_hex))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
</UL>

<P><STRONG><a name="[174]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[233]"></a>a_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[234]"></a>a_malloc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[208]"></a>a_malloc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_malloc_init))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[3da]"></a>a_netbuf_alloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[217]"></a>a_netbuf_alloc_raw</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[24f]"></a>a_netbuf_configure</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cust_driver_netbuf.o(i.a_netbuf_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_netbuf_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[212]"></a>a_netbuf_dequeue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[219]"></a>a_netbuf_enqueue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>

<P><STRONG><a name="[1c1]"></a>a_netbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_tx_pool
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[3db]"></a>a_netbuf_free_rx_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_free_rx_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[3dc]"></a>a_netbuf_free_tx_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_free_tx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[1f3]"></a>a_netbuf_get_fragment</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_get_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_get_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>

<P><STRONG><a name="[4d7]"></a>a_netbuf_headroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_headroom))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[221]"></a>a_netbuf_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[316]"></a>a_netbuf_pull</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[1e2]"></a>a_netbuf_purge_queue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_purge_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = a_netbuf_purge_queue &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>

<P><STRONG><a name="[25b]"></a>a_netbuf_push</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[312]"></a>a_netbuf_put</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
</UL>

<P><STRONG><a name="[3dd]"></a>a_netbuf_put_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a_netbuf_put_data &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[216]"></a>a_netbuf_queue_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>

<P><STRONG><a name="[3de]"></a>a_netbuf_reinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_reinit
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>

<P><STRONG><a name="[218]"></a>a_netbuf_set_rx_pool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_set_rx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[222]"></a>a_netbuf_tailroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_tailroom))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[1bc]"></a>a_netbuf_to_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[1bd]"></a>a_netbuf_to_len</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_to_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[314]"></a>a_netbuf_trim</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a_netbuf_trim &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[239]"></a>aggr_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcv_aggr.o(i.aggr_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[243]"></a>aggr_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcv_aggr.o(i.aggr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_init &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[18c]"></a>aggr_recv_addba_req_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rcv_aggr.o(i.aggr_recv_addba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>

<P><STRONG><a name="[18e]"></a>aggr_recv_delba_req_evt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_recv_delba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>

<P><STRONG><a name="[194]"></a>aggr_reset_state</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aggr_reset_state &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[17c]"></a>assert_failed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_io_buffer
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Read4CH
</UL>

<P><STRONG><a name="[1bf]"></a>assert_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rw_lib.o(i.assert_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
</UL>

<P><STRONG><a name="[3a9]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[3c2]"></a>ath_ioctl_handler</STRONG> (Thumb, 2106 bytes, Stack size 248 bytes, cust_api_ioctl.o(i.ath_ioctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_power_mode_cmd
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Ieee2freq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
</UL>

<P><STRONG><a name="[349]"></a>bind</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = bind &rArr; t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[1d9]"></a>blockForResponse</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cust_api_stack_offload.o(i.blockForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = blockForResponse &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_exit_critical
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>

<P><STRONG><a name="[1c6]"></a>clear_socket_context</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, api_stack_offload.o(i.clear_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_socket_context &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>

<P><STRONG><a name="[346]"></a>close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[4b3]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_utilities.o(i.configureTimerForRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = configureTimerForRunTimeStats &rArr; HAL_TIM_Base_Start_IT &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[34a]"></a>connect</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = connect &rArr; t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_connect
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[4c5]"></a>creat_tcpcTask1</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, my_task.o(i.creat_tcpcTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = creat_tcpcTask1 &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[4d4]"></a>custom_header_alloc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = custom_header_alloc &rArr; a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[4d5]"></a>custom_header_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_header_free &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[3d2]"></a>custom_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
</UL>

<P><STRONG><a name="[210]"></a>custom_receive_tcpip</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cust_api_stack_txrx.o(i.custom_receive_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>

<P><STRONG><a name="[4d6]"></a>custom_send_tcpip</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, cust_api_stack_txrx.o(i.custom_send_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_headroom
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[4d8]"></a>custom_socket_context_deinit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = custom_socket_context_deinit &rArr; rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
</UL>

<P><STRONG><a name="[4d9]"></a>custom_socket_context_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
</UL>

<P><STRONG><a name="[214]"></a>default_native_free_fn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.default_native_free_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = default_native_free_fn &rArr; txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[b7]"></a>delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[566]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[6d2]"></a>disk_ioctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[537]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[565]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[536]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[36e]"></a>do_file_script1</STRONG> (Thumb, 244 bytes, Stack size 136 bytes, lua_test.o(i.do_file_script1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = do_file_script1 &rArr; luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTest_Task
</UL>

<P><STRONG><a name="[51b]"></a>eTaskGetState</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[52d]"></a>f_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
</UL>

<P><STRONG><a name="[534]"></a>f_lseek</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_lseek
</UL>

<P><STRONG><a name="[53e]"></a>f_mount</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_init
</UL>

<P><STRONG><a name="[544]"></a>f_open</STRONG> (Thumb, 534 bytes, Stack size 632 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[550]"></a>f_read</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read
</UL>

<P><STRONG><a name="[52e]"></a>f_sync</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[554]"></a>f_write</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write
</UL>

<P><STRONG><a name="[3a5]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[50e]"></a>fclose</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_lua_config.o(i.fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fclose &rArr; mmc_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_close
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[557]"></a>feof</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_lua_config.o(i.feof))
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_feof
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[4cb]"></a>ff_convert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[542]"></a>ff_cre_syncobj</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[541]"></a>ff_del_syncobj</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ff_del_syncobj &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[55b]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[55d]"></a>ff_req_grant</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[499]"></a>ff_wtoupper</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[55f]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_lua_config.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[4db]"></a>fgets</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fgets.o(i.fgets))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fgets &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
</UL>

<P><STRONG><a name="[1c5]"></a>find_socket_context</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, api_stack_offload.o(i.find_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[509]"></a>fopen</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32_lua_config.o(i.fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = fopen &rArr; mmc_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>

<P><STRONG><a name="[8f]"></a>fputc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32_lua_config.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fputc &rArr; mmc_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[50d]"></a>fread</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, fread.o(i.fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fread &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getF
</UL>

<P><STRONG><a name="[374]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[3b9]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
</UL>

<P><STRONG><a name="[50a]"></a>fseek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_lua_config.o(i.fseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fseek &rArr; mmc_lseek &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[50b]"></a>ftell</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_lua_config.o(i.ftell))
<BR><BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_file_len
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[50f]"></a>fwrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fwrite &rArr; fputc &rArr; mmc_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_version
</UL>

<P><STRONG><a name="[6d6]"></a>getRunTimeCounterValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_utilities.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[547]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b8]"></a>get_stamp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.get_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_stamp &rArr; osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[36b]"></a>get_xtask_state</STRONG> (Thumb, 252 bytes, Stack size 192 bytes, task_utilities.o(i.get_xtask_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = get_xtask_state &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[59a]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = getc &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
</UL>

<P><STRONG><a name="[1d7]"></a>isSocketBlocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.isSocketBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>

<P><STRONG><a name="[3b7]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[3f9]"></a>luaC_barrier_</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[448]"></a>luaC_barrierback_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lgc.o(i.luaC_barrierback_))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[5ea]"></a>luaC_checkfinalizer</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lgc.o(i.luaC_checkfinalizer))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = luaC_checkfinalizer &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>

<P><STRONG><a name="[641]"></a>luaC_fix</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lgc.o(i.luaC_fix))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[493]"></a>luaC_freeallobjects</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lgc.o(i.luaC_freeallobjects))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = luaC_freeallobjects &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[5ec]"></a>luaC_fullgc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lgc.o(i.luaC_fullgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[4d2]"></a>luaC_newobj</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lgc.o(i.luaC_newobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>

<P><STRONG><a name="[5ed]"></a>luaC_runtilstate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lgc.o(i.luaC_runtilstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[490]"></a>luaC_step</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lgc.o(i.luaC_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[5f2]"></a>luaC_upvalbarrier_</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lgc.o(i.luaC_upvalbarrier_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[58d]"></a>luaC_upvdeccount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lgc.o(i.luaC_upvdeccount))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
</UL>

<P><STRONG><a name="[5f3]"></a>luaD_call</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ldo.o(i.luaD_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + In Cycle
<LI>Call Chain = luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[518]"></a>luaD_callnoyield</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldo.o(i.luaD_callnoyield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dothecall
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_call
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>

<P><STRONG><a name="[5b8]"></a>luaD_growstack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ldo.o(i.luaD_growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + In Cycle
<LI>Call Chain = luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;growstack
</UL>

<P><STRONG><a name="[5f7]"></a>luaD_hook</STRONG> (Thumb, 124 bytes, Stack size 128 bytes, ldo.o(i.luaD_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
</UL>

<P><STRONG><a name="[5f8]"></a>luaD_inctop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldo.o(i.luaD_inctop))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = luaD_inctop &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
</UL>

<P><STRONG><a name="[275]"></a>luaD_pcall</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ldo.o(i.luaD_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = luaD_pcall &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
</UL>

<P><STRONG><a name="[57d]"></a>luaD_poscall</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ldo.o(i.luaD_poscall))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveresults
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>

<P><STRONG><a name="[5f4]"></a>luaD_precall</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, ldo.o(i.luaD_precall))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + In Cycle
<LI>Call Chain = luaD_precall &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[5ff]"></a>luaD_protectedparser</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, ldo.o(i.luaD_protectedparser))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[5f9]"></a>luaD_rawrunprotected</STRONG> (Thumb, 54 bytes, Stack size 424 bytes, ldo.o(i.luaD_rawrunprotected))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>

<P><STRONG><a name="[5f6]"></a>luaD_reallocstack</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ldo.o(i.luaD_reallocstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = luaD_reallocstack &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>

<P><STRONG><a name="[5fb]"></a>luaD_shrinkstack</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ldo.o(i.luaD_shrinkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaD_shrinkstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[277]"></a>luaD_throw</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ldo.o(i.luaD_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = luaD_throw &rArr;  luaD_throw (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[5fe]"></a>luaE_extendCI</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lstate.o(i.luaE_extendCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = luaE_extendCI &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
</UL>

<P><STRONG><a name="[591]"></a>luaE_freeCI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstate.o(i.luaE_freeCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_freeCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>

<P><STRONG><a name="[58f]"></a>luaE_freethread</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lstate.o(i.luaE_freethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = luaE_freethread &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[5f0]"></a>luaE_setdebt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lstate.o(i.luaE_setdebt))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpause
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>

<P><STRONG><a name="[601]"></a>luaE_shrinkCI</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lstate.o(i.luaE_shrinkCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaE_shrinkCI &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>

<P><STRONG><a name="[492]"></a>luaF_close</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lfunc.o(i.luaF_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = luaF_close &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[603]"></a>luaF_findupval</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lfunc.o(i.luaF_findupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = luaF_findupval &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[58c]"></a>luaF_freeproto</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lfunc.o(i.luaF_freeproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaF_freeproto &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[579]"></a>luaF_getlocalname</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, lfunc.o(i.luaF_getlocalname))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaF_getlocalname
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[54e]"></a>luaF_initupvals</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lfunc.o(i.luaF_initupvals))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = luaF_initupvals &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[604]"></a>luaF_newCclosure</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lfunc.o(i.luaF_newCclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>

<P><STRONG><a name="[605]"></a>luaF_newLclosure</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lfunc.o(i.luaF_newLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
</UL>

<P><STRONG><a name="[32d]"></a>luaF_newproto</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lfunc.o(i.luaF_newproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = luaF_newproto &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[5d2]"></a>luaG_addinfo</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, ldebug.o(i.luaG_addinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>

<P><STRONG><a name="[606]"></a>luaG_concaterror</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ldebug.o(i.luaG_concaterror))
<BR><BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[607]"></a>luaG_errormsg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ldebug.o(i.luaG_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = luaG_errormsg &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
</UL>

<P><STRONG><a name="[608]"></a>luaG_opinterror</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ldebug.o(i.luaG_opinterror))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + In Cycle
<LI>Call Chain = luaG_opinterror &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[609]"></a>luaG_ordererror</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ldebug.o(i.luaG_ordererror))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = luaG_ordererror &rArr;  luaT_objtypename (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[571]"></a>luaG_runerror</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ldebug.o(i.luaG_runerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[60c]"></a>luaG_tointerror</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ldebug.o(i.luaG_tointerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + In Cycle
<LI>Call Chain = luaG_tointerror &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
</UL>

<P><STRONG><a name="[60e]"></a>luaG_traceexec</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ldebug.o(i.luaG_traceexec))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = luaG_traceexec &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[5fd]"></a>luaG_typeerror</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ldebug.o(i.luaG_typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
</UL>

<P><STRONG><a name="[58e]"></a>luaH_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ltable.o(i.luaH_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaH_free &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[60f]"></a>luaH_get</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ltable.o(i.luaH_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
</UL>

<P><STRONG><a name="[611]"></a>luaH_getint</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ltable.o(i.luaH_getint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
</UL>

<P><STRONG><a name="[612]"></a>luaH_getn</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, ltable.o(i.luaH_getn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = luaH_getn &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
</UL>

<P><STRONG><a name="[610]"></a>luaH_getshortstr</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ltable.o(i.luaH_getshortstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[43f]"></a>luaH_getstr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ltable.o(i.luaH_getstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = luaH_getstr &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[4ad]"></a>luaH_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ltable.o(i.luaH_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = luaH_new &rArr; setnodevector &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[614]"></a>luaH_newkey</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, ltable.o(i.luaH_newkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + In Cycle
<LI>Call Chain = luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
</UL>

<P><STRONG><a name="[616]"></a>luaH_next</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ltable.o(i.luaH_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>

<P><STRONG><a name="[539]"></a>luaH_resize</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, ltable.o(i.luaH_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + In Cycle
<LI>Call Chain = luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[617]"></a>luaH_resizearray</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ltable.o(i.luaH_resizearray))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = luaH_resizearray &rArr; luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[3f6]"></a>luaH_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ltable.o(i.luaH_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + In Cycle
<LI>Call Chain = luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[4ae]"></a>luaH_setint</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ltable.o(i.luaH_setint))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[586]"></a>luaK_checkstack</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lcode.o(i.luaK_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[471]"></a>luaK_codeABC</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcode.o(i.luaK_codeABC))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
</UL>

<P><STRONG><a name="[464]"></a>luaK_codeABx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcode.o(i.luaK_codeABx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[507]"></a>luaK_codek</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lcode.o(i.luaK_codek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaK_codek &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[528]"></a>luaK_concat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcode.o(i.luaK_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[4a4]"></a>luaK_dischargevars</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lcode.o(i.luaK_dischargevars))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_dischargevars &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[49c]"></a>luaK_exp2RK</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, lcode.o(i.luaK_exp2RK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[61a]"></a>luaK_exp2anyreg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
</UL>

<P><STRONG><a name="[562]"></a>luaK_exp2anyregup</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcode.o(i.luaK_exp2anyregup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaK_exp2anyregup &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[407]"></a>luaK_exp2nextreg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcode.o(i.luaK_exp2nextreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[619]"></a>luaK_exp2val</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcode.o(i.luaK_exp2val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
</UL>

<P><STRONG><a name="[49e]"></a>luaK_fixline</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcode.o(i.luaK_fixline))
<BR><BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[5ce]"></a>luaK_getlabel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcode.o(i.luaK_getlabel))
<BR><BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[61b]"></a>luaK_goiffalse</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiffalse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaK_goiffalse &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
</UL>

<P><STRONG><a name="[4b1]"></a>luaK_goiftrue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lcode.o(i.luaK_goiftrue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = luaK_goiftrue &rArr; jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[563]"></a>luaK_indexed</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcode.o(i.luaK_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[61c]"></a>luaK_infix</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcode.o(i.luaK_infix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaK_infix &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[508]"></a>luaK_intK</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, lcode.o(i.luaK_intK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[4b2]"></a>luaK_jump</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(i.luaK_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[409]"></a>luaK_nil</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcode.o(i.luaK_nil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_nil &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[573]"></a>luaK_patchclose</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcode.o(i.luaK_patchclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaK_patchclose
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>

<P><STRONG><a name="[497]"></a>luaK_patchlist</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcode.o(i.luaK_patchlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[52a]"></a>luaK_patchtohere</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.luaK_patchtohere))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaK_patchtohere &rArr; luaK_concat &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[61d]"></a>luaK_posfix</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lcode.o(i.luaK_posfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaK_posfix &rArr; codebinexpval &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[61e]"></a>luaK_prefix</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lcode.o(i.luaK_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaK_prefix &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[408]"></a>luaK_reserveregs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.luaK_reserveregs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[48f]"></a>luaK_ret</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcode.o(i.luaK_ret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaK_ret &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
</UL>

<P><STRONG><a name="[61f]"></a>luaK_self</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lcode.o(i.luaK_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaK_self &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[4bb]"></a>luaK_setlist</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcode.o(i.luaK_setlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_setlist &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[416]"></a>luaK_setoneret</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcode.o(i.luaK_setoneret))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[40a]"></a>luaK_setreturns</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lcode.o(i.luaK_setreturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaK_setreturns &rArr; luaK_reserveregs &rArr; luaK_checkstack &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>

<P><STRONG><a name="[417]"></a>luaK_storevar</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcode.o(i.luaK_storevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaK_storevar &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[4ab]"></a>luaK_stringK</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lcode.o(i.luaK_stringK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>

<P><STRONG><a name="[3e8]"></a>luaL_addlstring</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[405]"></a>luaL_addstring</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_addstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
</UL>

<P><STRONG><a name="[3e7]"></a>luaL_addvalue</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_addvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[3fc]"></a>luaL_argerror</STRONG> (Thumb, 118 bytes, Stack size 120 bytes, lauxlib.o(i.luaL_argerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[575]"></a>luaL_buffinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_buffinit))
<BR><BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[621]"></a>luaL_buffinitsize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_buffinitsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_buffinitsize &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[622]"></a>luaL_callmeta</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_callmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaL_callmeta &rArr; luaL_getmetafield &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
</UL>

<P><STRONG><a name="[4ee]"></a>luaL_checkany</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkany))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
</UL>

<P><STRONG><a name="[450]"></a>luaL_checkinteger</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[468]"></a>luaL_checklstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checklstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[626]"></a>luaL_checknumber</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checknumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_randomseed
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[552]"></a>luaL_checkoption</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[4a9]"></a>luaL_checkstack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
</UL>

<P><STRONG><a name="[451]"></a>luaL_checktype</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_checktype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[433]"></a>luaL_checkudata</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_checkudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
</UL>

<P><STRONG><a name="[628]"></a>luaL_checkversion_</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_checkversion_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaL_checkversion_ &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
</UL>

<P><STRONG><a name="[3e2]"></a>luaL_error</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[5c2]"></a>luaL_execresult</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_execresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaL_execresult &rArr; luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_pclose
</UL>

<P><STRONG><a name="[533]"></a>luaL_fileresult</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_fileresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = luaL_fileresult &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_fclose
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
</UL>

<P><STRONG><a name="[5e2]"></a>luaL_getmetafield</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getmetafield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = luaL_getmetafield &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
</UL>

<P><STRONG><a name="[62a]"></a>luaL_getsubtable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_getsubtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_absindex
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[5dc]"></a>luaL_gsub</STRONG> (Thumb, 100 bytes, Stack size 4192 bytes, lauxlib.o(i.luaL_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
</UL>

<P><STRONG><a name="[59d]"></a>luaL_len</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[4dc]"></a>luaL_loadbufferx</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_loadbufferx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
</UL>

<P><STRONG><a name="[513]"></a>luaL_loadfilex</STRONG> (Thumb, 242 bytes, Stack size 560 bytes, lauxlib.o(i.luaL_loadfilex))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipcomment
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
</UL>

<P><STRONG><a name="[512]"></a>luaL_loadstring</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_loadstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = luaL_loadstring &rArr; luaL_loadbufferx &rArr; lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[62e]"></a>luaL_newmetatable</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_newmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>

<P><STRONG><a name="[510]"></a>luaL_newstate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = luaL_newstate &rArr; lua_newstate &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_atpanic
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[511]"></a>luaL_openlibs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, linit.o(i.luaL_openlibs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaL_openlibs &rArr; luaL_requiref &rArr; luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[469]"></a>luaL_optinteger</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[4e4]"></a>luaL_optlstring</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[631]"></a>luaL_optnumber</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_optnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
</UL>

<P><STRONG><a name="[3e1]"></a>luaL_prepbuffsize</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_prepbuffsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[577]"></a>luaL_pushresult</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lauxlib.o(i.luaL_pushresult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[632]"></a>luaL_pushresultsize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lauxlib.o(i.luaL_pushresultsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = luaL_pushresultsize &rArr; luaL_pushresult &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_upper
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_reverse
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_lower
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
</UL>

<P><STRONG><a name="[630]"></a>luaL_requiref</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_requiref))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaL_requiref &rArr; luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
</UL>

<P><STRONG><a name="[634]"></a>luaL_setfuncs</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_setfuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
</UL>

<P><STRONG><a name="[635]"></a>luaL_setmetatable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(i.luaL_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>

<P><STRONG><a name="[5c3]"></a>luaL_testudata</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lauxlib.o(i.luaL_testudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = luaL_testudata &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>

<P><STRONG><a name="[3e4]"></a>luaL_tolstring</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, lauxlib.o(i.luaL_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = luaL_tolstring &rArr; luaL_callmeta &rArr; luaL_getmetafield &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tostring
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[4f6]"></a>luaL_traceback</STRONG> (Thumb, 266 bytes, Stack size 240 bytes, lauxlib.o(i.luaL_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
</UL>

<P><STRONG><a name="[5dd]"></a>luaL_where</STRONG> (Thumb, 56 bytes, Stack size 112 bytes, lauxlib.o(i.luaL_where))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaL_where &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[3f8]"></a>luaM_growaux_</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lmem.o(i.luaM_growaux_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>

<P><STRONG><a name="[325]"></a>luaM_realloc_</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lmem.o(i.luaM_realloc_))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_shrinkCI
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_extendCI
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[324]"></a>luaM_toobig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmem.o(i.luaM_toobig))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_reallocstack
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[4b9]"></a>luaO_arith</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, lobject.o(i.luaO_arith))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = luaO_arith &rArr; luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;numarith
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[4c4]"></a>luaO_ceillog2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lobject.o(i.luaO_ceillog2))
<BR><BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setnodevector
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[595]"></a>luaO_chunkid</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lobject.o(i.luaO_chunkid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
</UL>

<P><STRONG><a name="[647]"></a>luaO_fb2int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lobject.o(i.luaO_fb2int))
<BR><BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[5ab]"></a>luaO_hexavalue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lobject.o(i.luaO_hexavalue))
<BR><BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[4be]"></a>luaO_int2fb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lobject.o(i.luaO_int2fb))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[276]"></a>luaO_pushfstring</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, lobject.o(i.luaO_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[60b]"></a>luaO_pushvfstring</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, lobject.o(i.luaO_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + In Cycle
<LI>Call Chain = luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvfstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>

<P><STRONG><a name="[63e]"></a>luaO_str2num</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, lobject.o(i.luaO_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2int
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[63c]"></a>luaO_tostring</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, lobject.o(i.luaO_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = luaO_tostring &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
</UL>

<P><STRONG><a name="[63d]"></a>luaO_utf8esc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lobject.o(i.luaO_utf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaO_utf8esc
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[431]"></a>luaS_clearcache</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lstring.o(i.luaS_clearcache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_clearcache
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[32f]"></a>luaS_createlngstrobj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lstring.o(i.luaS_createlngstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = luaS_createlngstrobj &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[63f]"></a>luaS_eqlngstr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lstring.o(i.luaS_eqlngstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaS_eqlngstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
</UL>

<P><STRONG><a name="[5bf]"></a>luaS_hash</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lstring.o(i.luaS_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[640]"></a>luaS_hashlongstr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lstring.o(i.luaS_hashlongstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = luaS_hashlongstr &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>

<P><STRONG><a name="[53a]"></a>luaS_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lstring.o(i.luaS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaS_init &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[43e]"></a>luaS_new</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lstring.o(i.luaS_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_objtypename
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[32e]"></a>luaS_newlstr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lstring.o(i.luaS_newlstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushstr
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
</UL>

<P><STRONG><a name="[642]"></a>luaS_newudata</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lstring.o(i.luaS_newudata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>

<P><STRONG><a name="[590]"></a>luaS_remove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lstring.o(i.luaS_remove))
<BR><BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>

<P><STRONG><a name="[5c0]"></a>luaS_resize</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lstring.o(i.luaS_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = luaS_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
</UL>

<P><STRONG><a name="[643]"></a>luaT_callTM</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ltm.o(i.luaT_callTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[644]"></a>luaT_callbinTM</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ltm.o(i.luaT_callbinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>

<P><STRONG><a name="[645]"></a>luaT_callorderTM</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ltm.o(i.luaT_callorderTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = luaT_callorderTM &rArr;  luaT_callbinTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[5eb]"></a>luaT_gettm</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ltm.o(i.luaT_gettm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = luaT_gettm &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[274]"></a>luaT_gettmbyobj</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ltm.o(i.luaT_gettmbyobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaT_gettmbyobj &rArr; luaH_getshortstr
</UL>
<BR>[Calls]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>

<P><STRONG><a name="[53b]"></a>luaT_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ltm.o(i.luaT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaT_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[60a]"></a>luaT_objtypename</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ltm.o(i.luaT_objtypename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getshortstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
</UL>

<P><STRONG><a name="[639]"></a>luaT_trybinTM</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ltm.o(i.luaT_trybinTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_concaterror
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callbinTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[646]"></a>luaU_dump</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ldump.o(i.luaU_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = luaU_dump &rArr; DumpFunction &rArr; DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>

<P><STRONG><a name="[54f]"></a>luaU_undump</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lundump.o(i.luaU_undump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = luaU_undump &rArr; LoadFunction &rArr; LoadDebug &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[63b]"></a>luaV_concat</STRONG> (Thumb, 356 bytes, Stack size 72 bytes, lvm.o(i.luaV_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + In Cycle
<LI>Call Chain = luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buff
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>

<P><STRONG><a name="[5bc]"></a>luaV_div</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lvm.o(i.luaV_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = luaV_div &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[3f7]"></a>luaV_equalobj</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, lvm.o(i.luaV_equalobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + In Cycle
<LI>Call Chain = luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_eqlngstr
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[5f5]"></a>luaV_execute</STRONG> (Thumb, 4664 bytes, Stack size 112 bytes, lvm.o(i.luaV_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + In Cycle
<LI>Call Chain = luaV_execute &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_traceexec
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_fb2int
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resizearray
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushclosure
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>

<P><STRONG><a name="[64c]"></a>luaV_finishOp</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lvm.o(i.luaV_finishOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[440]"></a>luaV_finishget</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lvm.o(i.luaV_finishget))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + In Cycle
<LI>Call Chain = luaV_finishget &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>

<P><STRONG><a name="[449]"></a>luaV_finishset</STRONG> (Thumb, 266 bytes, Stack size 64 bytes, lvm.o(i.luaV_finishset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>

<P><STRONG><a name="[64a]"></a>luaV_lessequal</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lvm.o(i.luaV_lessequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = luaV_lessequal &rArr; LEnum &rArr; LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[649]"></a>luaV_lessthan</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lvm.o(i.luaV_lessthan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = luaV_lessthan &rArr; LTnum &rArr; LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_ordererror
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_strcmp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callorderTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>

<P><STRONG><a name="[5bb]"></a>luaV_mod</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lvm.o(i.luaV_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[648]"></a>luaV_objlen</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lvm.o(i.luaV_objlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = luaV_objlen &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_callTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
</UL>

<P><STRONG><a name="[5bd]"></a>luaV_shiftl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lvm.o(i.luaV_shiftl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaV_shiftl
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intarith
</UL>

<P><STRONG><a name="[582]"></a>luaV_tointeger</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, lvm.o(i.luaV_tointeger))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[583]"></a>luaV_tonumber_</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lvm.o(i.luaV_tonumber_))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_opinterror
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_trybinTM
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlimit
</UL>

<P><STRONG><a name="[53c]"></a>luaX_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, llex.o(i.luaX_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fix
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[4bc]"></a>luaX_lookahead</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llex.o(i.luaX_lookahead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = luaX_lookahead &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[5d9]"></a>luaX_newstring</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, llex.o(i.luaX_newstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
</UL>

<P><STRONG><a name="[483]"></a>luaX_next</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llex.o(i.luaX_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[64d]"></a>luaX_setinput</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, llex.o(i.luaX_setinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaX_setinput &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
</UL>

<P><STRONG><a name="[40e]"></a>luaX_syntaxerror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llex.o(i.luaX_syntaxerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[476]"></a>luaX_token2str</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, llex.o(i.luaX_token2str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = luaX_token2str &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>

<P><STRONG><a name="[54d]"></a>luaY_parser</STRONG> (Thumb, 198 bytes, Stack size 216 bytes, lparser.o(i.luaY_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = luaY_parser &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_setinput
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[478]"></a>luaZ_fill</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lzio.o(i.luaZ_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
</UL>

<P><STRONG><a name="[653]"></a>luaZ_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lzio.o(i.luaZ_init))
<BR><BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>

<P><STRONG><a name="[31f]"></a>luaZ_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lzio.o(i.luaZ_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = luaZ_read &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[623]"></a>lua_absindex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lapi.o(i.lua_absindex))
<BR><BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
</UL>

<P><STRONG><a name="[62f]"></a>lua_atpanic</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lapi.o(i.lua_atpanic))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>

<P><STRONG><a name="[3ec]"></a>lua_callk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lapi.o(i.lua_callk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[442]"></a>lua_checkstack</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lapi.o(i.lua_checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lua_checkstack &rArr; luaD_rawrunprotected &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
</UL>

<P><STRONG><a name="[516]"></a>lua_close</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lstate.o(i.lua_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lua_close &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[64f]"></a>lua_compare</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lapi.o(i.lua_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lua_compare &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
</UL>

<P><STRONG><a name="[569]"></a>lua_concat</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lapi.o(i.lua_concat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[59f]"></a>lua_copy</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lapi.o(i.lua_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_copy &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[4e8]"></a>lua_createtable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lapi.o(i.lua_createtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lua_createtable &rArr; luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_table
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_debug
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_coroutine
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[650]"></a>lua_dump</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lua_dump &rArr; luaU_dump &rArr; DumpFunction &rArr; DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
</UL>

<P><STRONG><a name="[5de]"></a>lua_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lapi.o(i.lua_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = lua_error &rArr; luaG_errormsg &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_errormsg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[5e0]"></a>lua_gc</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lapi.o(i.lua_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lua_gc &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
</UL>

<P><STRONG><a name="[6b2]"></a>lua_getallocf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_getallocf))
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>

<P><STRONG><a name="[56c]"></a>lua_getfield</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.lua_getfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>

<P><STRONG><a name="[5e5]"></a>lua_getglobal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lapi.o(i.lua_getglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = lua_getglobal &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
</UL>

<P><STRONG><a name="[4e0]"></a>lua_gethook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethook))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[4e3]"></a>lua_gethookcount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookcount))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[4df]"></a>lua_gethookmask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ldebug.o(i.lua_gethookmask))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[3f4]"></a>lua_geti</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lapi.o(i.lua_geti))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lua_geti &rArr; luaV_finishget &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>

<P><STRONG><a name="[4e7]"></a>lua_getinfo</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ldebug.o(i.lua_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = lua_getinfo &rArr; collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collectvalidlines
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
</UL>

<P><STRONG><a name="[4ed]"></a>lua_getlocal</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ldebug.o(i.lua_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_getlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
</UL>

<P><STRONG><a name="[486]"></a>lua_getmetatable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lapi.o(i.lua_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_getmetatable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[4e5]"></a>lua_getstack</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ldebug.o(i.lua_getstack))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
</UL>

<P><STRONG><a name="[3ed]"></a>lua_gettable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lapi.o(i.lua_gettable))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lua_gettable &rArr; luaV_finishget &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[435]"></a>lua_gettop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_gettop))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dofilecont
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_char
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[452]"></a>lua_getupvalue</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lapi.o(i.lua_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lua_getupvalue &rArr; aux_upvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>

<P><STRONG><a name="[4ef]"></a>lua_getuservalue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lapi.o(i.lua_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_getuservalue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
</UL>

<P><STRONG><a name="[4f9]"></a>lua_iscfunction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lapi.o(i.lua_iscfunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_iscfunction
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[3fe]"></a>lua_isinteger</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_isinteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_isinteger
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[624]"></a>lua_isnumber</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lapi.o(i.lua_isnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lua_isnumber &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[3ef]"></a>lua_isstring</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lapi.o(i.lua_isstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_isstring
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[5e9]"></a>lua_isyieldable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ldo.o(i.lua_isyieldable))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
</UL>

<P><STRONG><a name="[62c]"></a>lua_len</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lua_len &rArr; luaV_objlen &rArr;  luaG_typeerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_objlen
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
</UL>

<P><STRONG><a name="[5e3]"></a>lua_load</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lapi.o(i.lua_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lua_load &rArr; luaD_protectedparser &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_init
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_protectedparser
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
</UL>

<P><STRONG><a name="[654]"></a>lua_main_test</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lua_test.o(i.lua_main_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = lua_main_test &rArr; luaL_openlibs &rArr; luaL_requiref &rArr; luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadstring
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_version
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_message
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>lua_newstate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lstate.o(i.lua_newstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lua_newstate &rArr; close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.makeseed)
</UL>
<P><STRONG><a name="[5df]"></a>lua_newthread</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lstate.o(i.lua_newthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = lua_newthread &rArr; stack_init &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preinit_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
</UL>

<P><STRONG><a name="[5b3]"></a>lua_newuserdata</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lapi.o(i.lua_newuserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = lua_newuserdata &rArr; luaS_newudata &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newudata
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[56a]"></a>lua_next</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lapi.o(i.lua_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = lua_next &rArr; luaH_next &rArr; findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[4dd]"></a>lua_pcallk</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lapi.o(i.lua_pcallk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = lua_pcallk &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_call
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
</UL>

<P><STRONG><a name="[437]"></a>lua_pushboolean</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lapi.o(i.lua_pushboolean))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yieldable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ult
</UL>

<P><STRONG><a name="[438]"></a>lua_pushcclosure</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lapi.o(i.lua_pushcclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lua_pushcclosure &rArr; luaF_newCclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newCclosure
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
</UL>

<P><STRONG><a name="[4e6]"></a>lua_pushfstring</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lapi.o(i.lua_pushfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_preload
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>

<P><STRONG><a name="[436]"></a>lua_pushinteger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(i.lua_pushinteger))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipairsaux
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_len
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[4f8]"></a>lua_pushlightuserdata</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lapi.o(i.lua_pushlightuserdata))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[3f0]"></a>lua_pushlstring</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lapi.o(i.lua_pushlstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = lua_pushlstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[46b]"></a>lua_pushnil</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnil))
<BR><BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getmetatable
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_getmetatable
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[5e1]"></a>lua_pushnumber</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lapi.o(i.lua_pushnumber))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_collectgarbage
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_tan
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sqrt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_sin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_random
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_rad
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_exp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_deg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cos
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_atan
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_asin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_acos
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[446]"></a>lua_pushstring</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lapi.o(i.lua_pushstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_type
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_noclose
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_tostring
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_rep
</UL>

<P><STRONG><a name="[4e2]"></a>lua_pushthread</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lapi.o(i.lua_pushthread))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_corunning
</UL>

<P><STRONG><a name="[3ea]"></a>lua_pushvalue</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getregistry
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_ipairs
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_min
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_max
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_codes
</UL>

<P><STRONG><a name="[629]"></a>lua_pushvfstring</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lapi.o(i.lua_pushvfstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = lua_pushvfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>

<P><STRONG><a name="[568]"></a>lua_rawequal</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lapi.o(i.lua_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lua_rawequal &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawequal
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[47c]"></a>lua_rawget</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lapi.o(i.lua_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lua_rawget &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>

<P><STRONG><a name="[576]"></a>lua_rawgeti</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lapi.o(i.lua_rawgeti))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lua_rawgeti &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>

<P><STRONG><a name="[4e1]"></a>lua_rawgetp</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lapi.o(i.lua_rawgetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lua_rawgetp &rArr; luaH_get &rArr; getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hookf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>

<P><STRONG><a name="[5e6]"></a>lua_rawlen</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lapi.o(i.lua_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lua_rawlen &rArr; luaH_getn &rArr; luaH_getint
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getn
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
</UL>

<P><STRONG><a name="[4f2]"></a>lua_rawset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lapi.o(i.lua_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lua_rawset &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
</UL>

<P><STRONG><a name="[658]"></a>lua_rawseti</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lapi.o(i.lua_rawseti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = lua_rawseti &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[4f0]"></a>lua_rawsetp</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lapi.o(i.lua_rawsetp))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lua_rawsetp &rArr; luaH_set &rArr;  luaH_newkey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
</UL>

<P><STRONG><a name="[445]"></a>lua_resume</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, ldo.o(i.lua_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = lua_resume &rArr; resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seterrorobj
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_error
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_rawrunprotected
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[3e5]"></a>lua_rotate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lapi.o(i.lua_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lua_rotate &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
</UL>

<P><STRONG><a name="[4d0]"></a>lua_setfield</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.lua_setfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_utf8
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_math
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_base
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[633]"></a>lua_setglobal</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lapi.o(i.lua_setglobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = lua_setglobal &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsetstr
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
</UL>

<P><STRONG><a name="[4f3]"></a>lua_sethook</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ldebug.o(i.lua_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lua_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;laction
</UL>

<P><STRONG><a name="[65b]"></a>lua_seti</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lapi.o(i.lua_seti))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = lua_seti &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getint
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack
</UL>

<P><STRONG><a name="[4f4]"></a>lua_setlocal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ldebug.o(i.lua_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lua_setlocal &rArr; findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapextra
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
</UL>

<P><STRONG><a name="[4f1]"></a>lua_setmetatable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lapi.o(i.lua_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lua_setmetatable &rArr; luaC_checkfinalizer &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>

<P><STRONG><a name="[3e6]"></a>lua_settop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lapi.o(i.lua_settop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_settop
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_openlibs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawget
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_next
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_dofile
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;docall
</UL>

<P><STRONG><a name="[453]"></a>lua_setupvalue</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lapi.o(i.lua_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
</UL>

<P><STRONG><a name="[4f5]"></a>lua_setuservalue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lapi.o(i.lua_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lua_setuservalue &rArr; luaC_barrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setuservalue
</UL>

<P><STRONG><a name="[443]"></a>lua_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lapi.o(i.lua_status))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[5e7]"></a>lua_stringtonumber</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_stringtonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[3ee]"></a>lua_toboolean</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_toboolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_toboolean
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_requiref
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_dump
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[3ff]"></a>lua_tointegerx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lapi.o(i.lua_tointegerx))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lua_tointegerx &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_toint
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_fmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_abs
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
</UL>

<P><STRONG><a name="[3e0]"></a>lua_tolstring</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lapi.o(i.lua_tolstring))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_tostring
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_debug
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_print
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errfile
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
</UL>

<P><STRONG><a name="[401]"></a>lua_tonumberx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lapi.o(i.lua_tonumberx))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lua_tonumberx &rArr; luaV_tonumber_ &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[636]"></a>lua_topointer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lapi.o(i.lua_topointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_topointer
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
</UL>

<P><STRONG><a name="[5a6]"></a>lua_tothread</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lapi.o(i.lua_tothread))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_tothread
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
</UL>

<P><STRONG><a name="[59e]"></a>lua_touserdata</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lapi.o(i.lua_touserdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_touserdata
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gctm
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[3f1]"></a>lua_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lapi.o(i.lua_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setmetatable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getuservalue
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_setmetatable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_select
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_rawlen
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_reader
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_type
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_log
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
</UL>

<P><STRONG><a name="[3f2]"></a>lua_typename</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lapi.o(i.lua_typename))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_type
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msghandler
</UL>

<P><STRONG><a name="[4f7]"></a>lua_upvalueid</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lapi.o(i.lua_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lua_upvalueid &rArr; getupvalref
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[4fa]"></a>lua_upvaluejoin</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lapi.o(i.lua_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lua_upvaluejoin &rArr; getupvalref
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
</UL>

<P><STRONG><a name="[53d]"></a>lua_version</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lapi.o(i.lua_version))
<BR><BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[444]"></a>lua_xmove</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lapi.o(i.lua_xmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lua_xmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
</UL>

<P><STRONG><a name="[5e8]"></a>lua_yieldk</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ldo.o(i.lua_yieldk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = lua_yieldk &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_yield
</UL>

<P><STRONG><a name="[f7]"></a>luaopen_base</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lbaselib.o(i.luaopen_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaopen_base &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>luaopen_coroutine</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcorolib.o(i.luaopen_coroutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaopen_coroutine &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>luaopen_debug</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ldblib.o(i.luaopen_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaopen_debug &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>luaopen_io</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, liolib.o(i.luaopen_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaopen_io &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_newmetatable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>luaopen_math</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lmathlib.o(i.luaopen_math))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaopen_math &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>luaopen_package</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, loadlib.o(i.luaopen_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 5992<LI>Call Chain = luaopen_package &rArr; setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getsubtable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>luaopen_string</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lstrlib.o(i.luaopen_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaopen_string &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>luaopen_table</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ltablib.o(i.luaopen_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaopen_table &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>luaopen_utf8</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lutf8lib.o(i.luaopen_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = luaopen_utf8 &rArr; luaL_setfuncs &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setfuncs
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkversion_
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> linit.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = main &rArr; lua_main_test &rArr; luaL_openlibs &rArr; luaL_requiref &rArr; luaL_getsubtable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_printf_init
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_init
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbReceiveData
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_CONVEST_PWM_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD7606_Init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOff
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[376]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[556]"></a>mmc_close</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mmc_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[593]"></a>mmc_file_len</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mmcfs.o(i.mmc_file_len))
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
</UL>

<P><STRONG><a name="[592]"></a>mmc_lseek</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mmcfs.o(i.mmc_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mmc_lseek &rArr; f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[57f]"></a>mmc_open</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mmcfs.o(i.mmc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = mmc_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcfs_find_empty_fd
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[560]"></a>mmc_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[589]"></a>mmc_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mmcfs.o(i.mmc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mmc_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[558]"></a>mmcfs_feof</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mmcfs.o(i.mmcfs_feof))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
</UL>

<P><STRONG><a name="[66a]"></a>mmcfs_find_empty_fd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mmcfs.o(i.mmcfs_find_empty_fd))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_open
</UL>

<P><STRONG><a name="[65f]"></a>mmcfs_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mmcfs.o(i.mmcfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mmcfs_init &rArr; f_mount &rArr; ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66c]"></a>my_mem_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, my_malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[24]"></a>my_mem_init</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, my_malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = my_mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_malloc.o(.data)
</UL>
<P><STRONG><a name="[66d]"></a>my_mem_malloc</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, my_malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[25]"></a>my_mem_perused</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, my_malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_malloc.o(.data)
</UL>
<P><STRONG><a name="[5c6]"></a>myfree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, my_malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[66e]"></a>mymemcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, my_malloc.o(i.mymemcpy))
<BR><BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
</UL>

<P><STRONG><a name="[66b]"></a>mymemset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[5c5]"></a>myrealloc</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, my_malloc.o(i.myrealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = myrealloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_alloc
</UL>

<P><STRONG><a name="[36c]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_power_up_down
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTest_Task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquireTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[366]"></a>osKernelRunning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[660]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[369]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[367]"></a>osMessageCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[368]"></a>osMessageGet</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2e8]"></a>osMessagePut</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[334]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
</UL>

<P><STRONG><a name="[67e]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
</UL>

<P><STRONG><a name="[34e]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[5a3]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
</UL>

<P><STRONG><a name="[559]"></a>osSemaphoreCreate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[55a]"></a>osSemaphoreDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[55c]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[55e]"></a>osSemaphoreWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[36f]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[335]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
</UL>

<P><STRONG><a name="[683]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
</UL>

<P><STRONG><a name="[688]"></a>platform_init</STRONG> (Thumb, 256 bytes, Stack size 136 bytes, my_task.o(i.platform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = platform_init &rArr; rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_init_params
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[bb]"></a>pvPortMalloc</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[6fa]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6a1]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[6b4]"></a>rw_appdemo_context_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ap_sta.o(i.rw_appdemo_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_appdemo_context_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[23e]"></a>rw_creat_mutex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rw_os.o(i.rw_creat_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rw_creat_mutex &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>

<P><STRONG><a name="[20a]"></a>rw_creat_sem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rw_os.o(i.rw_creat_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>

<P><STRONG><a name="[21a]"></a>rw_creat_task</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, rw_os.o(i.rw_creat_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rw_creat_task &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
</UL>

<P><STRONG><a name="[23a]"></a>rw_del_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>

<P><STRONG><a name="[205]"></a>rw_del_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>

<P><STRONG><a name="[204]"></a>rw_del_task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_del_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rw_del_task &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[45d]"></a>rw_enter_critical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_os.o(i.rw_enter_critical))
<BR><BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>

<P><STRONG><a name="[45e]"></a>rw_exit_critical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rw_os.o(i.rw_exit_critical))
<BR><BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>

<P><STRONG><a name="[68b]"></a>rw_getLibVersion</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rw_lib.o(i.rw_getLibVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rw_getLibVersion &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[68c]"></a>rw_getMacAddr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i.rw_getMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = rw_getMacAddr &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[6b5]"></a>rw_ipConfig</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, rw_lib.o(i.rw_ipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = rw_ipConfig &rArr; t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[21e]"></a>rw_lock_mutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rw_os.o(i.rw_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>

<P><STRONG><a name="[6b8]"></a>rw_network_init</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, ap_sta.o(i.rw_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[6ba]"></a>rw_network_startSTA</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, ap_sta.o(i.rw_network_startSTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[1e4]"></a>rw_pend_sem</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rw_os.o(i.rw_pend_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[21c]"></a>rw_post_drv_sem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rw_os.o(i.rw_post_drv_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rw_post_drv_sem &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
</UL>

<P><STRONG><a name="[21d]"></a>rw_post_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_post_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>

<P><STRONG><a name="[68a]"></a>rw_sysDriverInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[6bb]"></a>rw_sysDriverReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rw_sysDriverReset &rArr; Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
</UL>

<P><STRONG><a name="[34f]"></a>rw_sysSleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.rw_sysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[220]"></a>rw_unlock_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rw_os.o(i.rw_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>

<P><STRONG><a name="[6b9]"></a>rw_wlanConnect</STRONG> (Thumb, 724 bytes, Stack size 64 bytes, rw_lib.o(i.rw_wlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[6bc]"></a>rw_wlanGetScanInfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rw_lib.o(i.rw_wlanGetScanInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rw_wlanGetScanInfo &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[352]"></a>send</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rw_lib.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[1d1]"></a>send_stack_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, api_stack_offload.o(i.send_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[48e]"></a>shutdown</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rw_lib.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[345]"></a>socket</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rw_lib.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = socket &rArr; t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient
</UL>

<P><STRONG><a name="[1a6]"></a>socket_context_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = socket_context_deinit &rArr; custom_socket_context_deinit &rArr; rw_del_sem &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[1b2]"></a>socket_context_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = socket_context_init &rArr; custom_socket_context_init &rArr; rw_creat_sem &rArr; osSemaphoreCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[3a1]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[458]"></a>t_bind</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[4b4]"></a>t_connect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = t_connect &rArr; Api_connect &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[6b6]"></a>t_ipconfig</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.t_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[6b7]"></a>t_ipconfig_dhcp_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = t_ipconfig_dhcp_pool &rArr; Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[6c2]"></a>t_send</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[6d3]"></a>t_sendto</STRONG> (Thumb, 498 bytes, Stack size 192 bytes, cust_api_stack_offload.o(i.t_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
</UL>

<P><STRONG><a name="[6c3]"></a>t_shutdown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.t_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[6c9]"></a>t_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[36a]"></a>test_netWorkTask</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, my_task.o(i.test_netWorkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = test_netWorkTask &rArr; rw_network_startSTA &rArr; rw_network_init &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_appdemo_context_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAppTask
</UL>

<P><STRONG><a name="[44e]"></a>time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_lua_config.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeseed
</UL>

<P><STRONG><a name="[1cb]"></a>txpkt_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.txpkt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
</UL>

<P><STRONG><a name="[1c7]"></a>unblock</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.unblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[693]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[5a0]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[5a1]"></a>uxTaskGetSystemState</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[6ab]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, task_utilities.o(i.vApplicationMallocFailedHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6d7]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, task_utilities.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[697]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[6a0]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[695]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[694]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[51c]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_enter_critical
</UL>

<P><STRONG><a name="[51d]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_exit_critical
</UL>

<P><STRONG><a name="[ba]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[6f5]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[6d8]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[67f]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[6da]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[672]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[684]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[6a4]"></a>vTaskGetInfo</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[6a7]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[6dd]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6de]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6fb]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[674]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>
<BR>[Called By]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[699]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[150]"></a>vTaskSwitchContext</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[689]"></a>wifi_init_params</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.wifi_init_params))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
</UL>

<P><STRONG><a name="[1d0]"></a>wmi_allow_aggr_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_allow_aggr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_allow_aggr_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[19c]"></a>wmi_ap_profile_commit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_profile_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_ap_profile_commit &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[426]"></a>wmi_ap_set_param</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_ap_set_param &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1c3]"></a>wmi_bssfilter_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssfilter_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>

<P><STRONG><a name="[6e1]"></a>wmi_cmd_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wmi.o(i.wmi_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[199]"></a>wmi_connect_cmd</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_connect_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[1bb]"></a>wmi_control_rx</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, wmi.o(i.wmi_control_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[1a0]"></a>wmi_data_hdr_add</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wmi.o(i.wmi_data_hdr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[1be]"></a>wmi_data_hdr_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wmi.o(i.wmi_data_hdr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wmi_data_hdr_remove &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[1ab]"></a>wmi_disconnect_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wmi.o(i.wmi_disconnect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>

<P><STRONG><a name="[41e]"></a>wmi_get_pmk_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_get_pmk_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[425]"></a>wmi_get_power_mode_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wmi.o(i.wmi_get_power_mode_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[41c]"></a>wmi_get_stats_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_stats_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_get_stats_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1a1]"></a>wmi_implicit_create_pstream</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wmi.o(i.wmi_implicit_create_pstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wmi_implicit_create_pstream &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[242]"></a>wmi_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wmi.o(i.wmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wmi_init &rArr; rw_creat_mutex &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[419]"></a>wmi_listeninterval_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_listeninterval_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_listeninterval_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[6f0]"></a>wmi_meta_add</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, wmi.o(i.wmi_meta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
</UL>

<P><STRONG><a name="[418]"></a>wmi_pmparams_cmd</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, wmi.o(i.wmi_pmparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_pmparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1d5]"></a>wmi_powermode_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_powermode_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_powermode_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>

<P><STRONG><a name="[422]"></a>wmi_probedSsid_cmd</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wmi.o(i.wmi_probedSsid_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_probedSsid_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[427]"></a>wmi_promiscuous_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_promiscuous_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_promiscuous_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[6f3]"></a>wmi_qos_state_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wmi.o(i.wmi_qos_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wmi_qos_state_init &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[198]"></a>wmi_scanparams_cmd</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, wmi.o(i.wmi_scanparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[41a]"></a>wmi_set_channelParams_cmd</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wmi.o(i.wmi_set_channelParams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wmi_set_channelParams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[420]"></a>wmi_set_channel_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_channel_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_channel_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1fb]"></a>wmi_set_control_ep</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wmi.o(i.wmi_set_control_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wmi_set_control_ep &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[41b]"></a>wmi_set_ht_cap_cmd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_ht_cap_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_ht_cap_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[421]"></a>wmi_set_passphrase_cmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_passphrase_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_passphrase_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[41d]"></a>wmi_set_pmk_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_set_pmk_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[238]"></a>wmi_shutdown</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wmi_shutdown &rArr; rw_del_mutex &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[1d8]"></a>wmi_socket_cmd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wmi.o(i.wmi_socket_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_connect
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
</UL>

<P><STRONG><a name="[423]"></a>wmi_startscan_cmd</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, wmi.o(i.wmi_startscan_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wmi_startscan_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1cf]"></a>wmi_storerecall_configure_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_storerecall_configure_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_storerecall_configure_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[41f]"></a>wmi_wps_start_cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_start_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wmi_wps_start_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[5a4]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[6df]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[681]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[67d]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[678]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[67a]"></a>xQueueGenericReceive</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[6f9]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[67c]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[67b]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[680]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>

<P><STRONG><a name="[679]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[6fc]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4c6]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; vApplicationMallocFailedHook &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
</UL>

<P><STRONG><a name="[673]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[677]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[676]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[6f8]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[69e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[6a6]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[69a]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[65e]"></a>x_printf_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xprint_init.o(i.x_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>x_uart_getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xprint_init.o(i.x_uart_getc))
<BR>[Address Reference Count : 1]<UL><LI> xprint_init.o(i.x_printf_init)
</UL>
<P><STRONG><a name="[c0]"></a>x_uart_putc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xprint_init.o(i.x_uart_putc))
<BR>[Address Reference Count : 1]<UL><LI> xprint_init.o(i.x_printf_init)
</UL>
<P><STRONG><a name="[50c]"></a>xprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, xprintf.o(i.xprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xprintf &rArr; xvprintf &rArr; xputs &rArr; xputc &rArr;  xputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xvprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[6fe]"></a>xputc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xprintf.o(i.xputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = xputc &rArr;  xputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputc
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xvprintf
</UL>

<P><STRONG><a name="[6ff]"></a>xputs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xprintf.o(i.xputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xputs &rArr; xputc &rArr;  xputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xvprintf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b0]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[69c]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[69d]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[6a2]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6a5]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[675]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[682]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[6a9]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[6aa]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[692]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[696]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[698]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[69b]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[b2]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[69f]"></a>prvInitialiseNewTask</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[6a3]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[6db]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[6dc]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvTaskCheckFreeStackSpace))
<BR><BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[18]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>CDC_Init_FS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>CDC_Receive_FS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[362]"></a>SD_CheckStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[183]"></a>ADC_Init</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[27f]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[27e]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[281]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[2f6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2f9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[302]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[304]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC3_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[305]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM_OC4_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[2f7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[2f8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[30d]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_SetConfig &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2f0]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[2ef]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[290]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2ae]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[393]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[8d]"></a>SD_DMAError</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[8c]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[8b]"></a>SD_DMARxAbort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[8e]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[8a]"></a>SD_DMATxAbort</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[363]"></a>SD_FindSCR</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Enable
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WideBus_Disable
</UL>

<P><STRONG><a name="[2e3]"></a>SD_InitCard</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2e2]"></a>SD_PowerON</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdOperCond &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2d2]"></a>SD_WideBus_Disable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WideBus_Disable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2d1]"></a>SD_WideBus_Enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.SD_WideBus_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WideBus_Enable &rArr; SD_FindSCR &rArr; SDMMC_CmdSendSCR &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[355]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[35d]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[357]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[361]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[b4]"></a>_deinit_interface</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._deinit_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _deinit_interface &rArr; HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[b9]"></a>_ext_interrupt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i._ext_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[b3]"></a>_init_interface</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._init_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _init_interface &rArr; WIFI_SPI_Init &rArr; MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SPI_Init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[b5]"></a>_power_up_down</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i._power_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _power_up_down &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[b6]"></a>_spi_io_buffer</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, rw_lib_platform_os.o(i._spi_io_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _spi_io_buffer &rArr; HAL_SPI_TransmitReceive &rArr; assert_failed &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[489]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rw_lib_platform_os.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[bd]"></a>connect_callback</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, rw_lib_platform_os.o(i.connect_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = connect_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[bc]"></a>customer_assert</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.customer_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = customer_assert &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[4b5]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rw_lib_platform_os.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_easy_callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_callback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customer_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect_callback
</UL>

<P><STRONG><a name="[be]"></a>scan_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rw_lib_platform_os.o(i.scan_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scan_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[bf]"></a>wps_easy_callback</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, rw_lib_platform_os.o(i.wps_easy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wps_easy_callback &rArr; p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_lock_mutex
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clean_filename
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rw_lib_platform_os.o(i.wifi_init_params)
</UL>
<P><STRONG><a name="[48a]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ap_sta.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[685]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ap_sta.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_startSTA
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_network_init
</UL>

<P><STRONG><a name="[383]"></a>USBD_GetDescriptor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[38f]"></a>USBD_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1e]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_CDC_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_CDC_Setup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[34c]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, my_task.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[34b]"></a>p_lock_mutex</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_task.o(i.p_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = p_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_netWorkTask
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_tcpcTask1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAK_TcpClient_EventHandle1
</UL>

<P><STRONG><a name="[48b]"></a>clean_filename</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_utilities.o(i.clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xtask_state
</UL>

<P><STRONG><a name="[472]"></a>check_fs</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4cc]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[546]"></a>chk_lock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[540]"></a>clear_lock</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[535]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[500]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[498]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4c7]"></a>create_chain</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[4ca]"></a>create_name</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[530]"></a>dec_lock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4fb]"></a>dir_find</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4fe]"></a>dir_next</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[501]"></a>dir_register</STRONG> (Thumb, 480 bytes, Stack size 72 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4fc]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[543]"></a>find_volume</STRONG> (Thumb, 594 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = find_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[545]"></a>follow_path</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[503]"></a>gen_numname</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4c8]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[53f]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[54c]"></a>inc_lock</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[549]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[475]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[474]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[564]"></a>lock_fs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[502]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4cd]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[473]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[4c9]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[54b]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[54a]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[548]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[504]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4fd]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[553]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[4ff]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[531]"></a>unlock_fs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[52f]"></a>validate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[652]"></a>aux_upvalue</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lapi.o(i.aux_upvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aux_upvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>

<P><STRONG><a name="[43d]"></a>auxgetstr</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lapi.o(i.auxgetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishget
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>

<P><STRONG><a name="[447]"></a>auxsetstr</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lapi.o(i.auxsetstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishset
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrierback_
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setglobal
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
</UL>

<P><STRONG><a name="[aa]"></a>f_call</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.f_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = f_call &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_pcallk)
</UL>
<P><STRONG><a name="[5b1]"></a>getupvalref</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lapi.o(i.getupvalref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getupvalref
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
</UL>

<P><STRONG><a name="[a8]"></a>growstack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lapi.o(i.growstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = growstack &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_growstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lapi.o(i.lua_checkstack)
</UL>
<P><STRONG><a name="[5b2]"></a>index2addr</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lapi.o(i.index2addr))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_topointer
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawseti
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_len
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isnumber
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getupvalref
</UL>

<P><STRONG><a name="[65a]"></a>reverse</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, lapi.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>

<P><STRONG><a name="[a7]"></a>boxgc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lauxlib.o(i.boxgc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = boxgc &rArr; resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_prepbuffsize)
</UL>
<P><STRONG><a name="[521]"></a>errfile</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lauxlib.o(i.errfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = errfile &rArr; lua_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[567]"></a>findfield</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lauxlib.o(i.findfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + In Cycle
<LI>Call Chain = findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
</UL>

<P><STRONG><a name="[a4]"></a>getF</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lauxlib.o(i.getF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = getF &rArr; fread &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadfilex)
</UL>
<P><STRONG><a name="[a3]"></a>getS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lauxlib.o(i.getS))
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_loadbufferx)
</UL>
<P><STRONG><a name="[a5]"></a>l_alloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lauxlib.o(i.l_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = l_alloc &rArr; myrealloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myrealloc
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[a6]"></a>panic</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lauxlib.o(i.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = panic &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lauxlib.o(i.luaL_newstate)
</UL>
<P><STRONG><a name="[637]"></a>pushfuncname</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lauxlib.o(i.pushfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushglobalfuncname
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
</UL>

<P><STRONG><a name="[620]"></a>pushglobalfuncname</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lauxlib.o(i.pushglobalfuncname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfield
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushfuncname
</UL>

<P><STRONG><a name="[467]"></a>resizebox</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lauxlib.o(i.resizebox))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + In Cycle
<LI>Call Chain = resizebox &rArr;  resizebox (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getallocf
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resizebox
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boxgc
</UL>

<P><STRONG><a name="[62d]"></a>skipcomment</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lauxlib.o(i.skipcomment))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = skipcomment &rArr; getc &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
</UL>

<P><STRONG><a name="[625]"></a>tag_error</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lauxlib.o(i.tag_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;typeerror
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
</UL>

<P><STRONG><a name="[627]"></a>typeerror</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lauxlib.o(i.typeerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tag_error
</UL>

<P><STRONG><a name="[454]"></a>b_str2int</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lbaselib.o(i.b_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = b_str2int &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_tonumber
</UL>

<P><STRONG><a name="[9d]"></a>dofilecont</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lbaselib.o(i.dofilecont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dofilecont
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_dofile)
</UL>
<P><STRONG><a name="[a1]"></a>finishpcall</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lbaselib.o(i.finishpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finishpcall &rArr; lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_xpcall
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pcall
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pcall)
<LI> lbaselib.o(i.luaB_xpcall)
</UL>
<P><STRONG><a name="[9f]"></a>generic_reader</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lbaselib.o(i.generic_reader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = generic_reader &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_load)
</UL>
<P><STRONG><a name="[9e]"></a>ipairsaux</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lbaselib.o(i.ipairsaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = ipairsaux &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(i.luaB_ipairs)
</UL>
<P><STRONG><a name="[5da]"></a>load_aux</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lbaselib.o(i.load_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = load_aux &rArr; lua_setupvalue &rArr; luaC_upvalbarrier_ &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_loadfile
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_load
</UL>

<P><STRONG><a name="[cb]"></a>luaB_assert</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaB_assert &rArr; luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_error
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>luaB_collectgarbage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_collectgarbage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = luaB_collectgarbage &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>luaB_dofile</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_dofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = luaB_dofile &rArr; luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>luaB_error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = luaB_error &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>luaB_getmetatable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>luaB_ipairs</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_ipairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_ipairs &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>luaB_load</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lbaselib.o(i.luaB_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = luaB_load &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>luaB_loadfile</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_loadfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = luaB_loadfile &rArr; luaL_loadfilex &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_aux
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>luaB_next</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_next &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_next
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lbaselib.o(i.luaB_pairs)
<LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>luaB_pairs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lbaselib.o(i.luaB_pairs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = luaB_pairs &rArr; pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairsmeta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>luaB_pcall</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_pcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaB_pcall &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>luaB_print</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lbaselib.o(i.luaB_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = luaB_print &rArr; lua_getglobal &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getglobal
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>luaB_rawequal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawequal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_rawequal &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawequal
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>luaB_rawget</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawget))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_rawget &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>luaB_rawlen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = luaB_rawlen &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>luaB_rawset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_rawset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = luaB_rawset &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>luaB_select</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_select &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>luaB_setmetatable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaB_setmetatable &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>luaB_tonumber</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, lbaselib.o(i.luaB_tonumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = luaB_tonumber &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b_str2int
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>luaB_tostring</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lbaselib.o(i.luaB_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = luaB_tostring &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>luaB_type</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lbaselib.o(i.luaB_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = luaB_type &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>luaB_xpcall</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lbaselib.o(i.luaB_xpcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_xpcall &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishpcall
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lbaselib.o(.constdata)
</UL>
<P><STRONG><a name="[5e4]"></a>pairsmeta</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lbaselib.o(i.pairsmeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = pairsmeta &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_getmetafield
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_pairs
</UL>

<P><STRONG><a name="[3f5]"></a>addk</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, lcode.o(i.addk))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_set
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boolK
</UL>

<P><STRONG><a name="[466]"></a>boolK</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lcode.o(i.boolK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = boolK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
</UL>

<P><STRONG><a name="[49a]"></a>code_loadbool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcode.o(i.code_loadbool))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = code_loadbool &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[49b]"></a>codebinexpval</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lcode.o(i.codebinexpval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = codebinexpval &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[49f]"></a>codecomp</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lcode.o(i.codecomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = codecomp &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[4a1]"></a>codeextraarg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcode.o(i.codeextraarg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = codeextraarg &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
</UL>

<P><STRONG><a name="[4a3]"></a>codenot</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lcode.o(i.codenot))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = codenot &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
</UL>

<P><STRONG><a name="[4a0]"></a>condjump</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcode.o(i.condjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = condjump &rArr; luaK_jump &rArr; luaK_codeABx &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
</UL>

<P><STRONG><a name="[4b6]"></a>constfolding</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, lcode.o(i.constfolding))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = constfolding &rArr; luaO_arith &rArr; luaT_trybinTM &rArr; luaT_callbinTM &rArr; luaT_callTM &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validop
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tonumeral
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
</UL>

<P><STRONG><a name="[4a6]"></a>discharge2anyreg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcode.o(i.discharge2anyreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[505]"></a>discharge2reg</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lcode.o(i.discharge2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_numberK
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
</UL>

<P><STRONG><a name="[527]"></a>exp2reg</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lcode.o(i.exp2reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;code_loadbool
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
</UL>

<P><STRONG><a name="[57e]"></a>fixjump</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lcode.o(i.fixjump))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[4a7]"></a>freeexp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcode.o(i.freeexp))
<BR><BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumponcond
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[49d]"></a>freeexps</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lcode.o(i.freeexps))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = freeexps
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freereg
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codecomp
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codebinexpval
</UL>

<P><STRONG><a name="[58a]"></a>freereg</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcode.o(i.freereg))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexps
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
</UL>

<P><STRONG><a name="[618]"></a>getjump</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcode.o(i.getjump))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[66f]"></a>getjumpcontrol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcode.o(i.getjumpcontrol))
<BR><BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;negatecondition
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;need_value
</UL>

<P><STRONG><a name="[5c4]"></a>jumponcond</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lcode.o(i.jumponcond))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = jumponcond &rArr; discharge2anyreg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeexp
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2anyreg
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;condjump
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
</UL>

<P><STRONG><a name="[4a2]"></a>luaK_code</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lcode.o(i.luaK_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codeextraarg
</UL>

<P><STRONG><a name="[506]"></a>luaK_numberK</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lcode.o(i.luaK_numberK))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = luaK_numberK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addk
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;discharge2reg
</UL>

<P><STRONG><a name="[529]"></a>need_value</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lcode.o(i.need_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = need_value
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[4a5]"></a>negatecondition</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcode.o(i.negatecondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = negatecondition
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[52b]"></a>patchlistaux</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lcode.o(i.patchlistaux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixjump
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_code
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp2reg
</UL>

<P><STRONG><a name="[687]"></a>patchtestreg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcode.o(i.patchtestreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = patchtestreg
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjumpcontrol
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removevalues
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchlistaux
</UL>

<P><STRONG><a name="[4a8]"></a>removevalues</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcode.o(i.removevalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = removevalues &rArr; patchtestreg
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchtestreg
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getjump
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codenot
</UL>

<P><STRONG><a name="[4b7]"></a>tonumeral</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lcode.o(i.tonumeral))
<BR><BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[4b8]"></a>validop</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lcode.o(i.validop))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = validop &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constfolding
</UL>

<P><STRONG><a name="[441]"></a>auxresume</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lcorolib.o(i.auxresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = auxresume &rArr; lua_resume &rArr; resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_auxwrap
</UL>

<P><STRONG><a name="[5a5]"></a>getco</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcorolib.o(i.getco))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_costatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_coresume
</UL>

<P><STRONG><a name="[9c]"></a>luaB_auxwrap</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_auxwrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = luaB_auxwrap &rArr; auxresume &rArr; lua_resume &rArr; resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_where
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_error
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_concat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(i.luaB_cowrap)
</UL>
<P><STRONG><a name="[e0]"></a>luaB_cocreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_cocreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cowrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>luaB_coresume</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lcorolib.o(i.luaB_coresume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = luaB_coresume &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxresume
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>luaB_corunning</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_corunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaB_corunning
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>luaB_costatus</STRONG> (Thumb, 76 bytes, Stack size 112 bytes, lcorolib.o(i.luaB_costatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = luaB_costatus &rArr; getco &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getco
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_status
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>luaB_cowrap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_cowrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = luaB_cowrap &rArr; luaB_cocreate &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaB_cocreate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>luaB_yield</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = luaB_yield &rArr; lua_yieldk &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_yieldk
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>luaB_yieldable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcorolib.o(i.luaB_yieldable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = luaB_yieldable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isyieldable
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcorolib.o(.constdata)
</UL>
<P><STRONG><a name="[44f]"></a>auxupvalue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ldblib.o(i.auxupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = auxupvalue &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setupvalue
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setupvalue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getupvalue
</UL>

<P><STRONG><a name="[484]"></a>checkstack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ldblib.o(i.checkstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[487]"></a>checkupval</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ldblib.o(i.checkupval))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = checkupval &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getupvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvaluejoin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_upvalueid
</UL>

<P><STRONG><a name="[e7]"></a>db_debug</STRONG> (Thumb, 130 bytes, Stack size 272 bytes, ldblib.o(i.db_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = db_debug &rArr; lua_pcallk &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadbufferx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>db_gethook</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ldblib.o(i.db_gethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = db_gethook &rArr; checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookmask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethookcount
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gethook
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>db_getinfo</STRONG> (Thumb, 388 bytes, Stack size 120 bytes, ldblib.o(i.db_getinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = db_getinfo &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;treatstackoption
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabss
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsi
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settabsb
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>db_getlocal</STRONG> (Thumb, 170 bytes, Stack size 120 bytes, ldblib.o(i.db_getlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = db_getlocal &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>db_getmetatable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ldblib.o(i.db_getmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = db_getmetatable &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>db_getregistry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ldblib.o(i.db_getregistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = db_getregistry &rArr; lua_pushvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>db_getupvalue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ldblib.o(i.db_getupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = db_getupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>db_getuservalue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ldblib.o(i.db_getuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = db_getuservalue &rArr; lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getuservalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>db_sethook</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, ldblib.o(i.db_sethook))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = db_sethook &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawsetp
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawset
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>db_setlocal</STRONG> (Thumb, 144 bytes, Stack size 128 bytes, ldblib.o(i.db_setlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = db_setlocal &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkstack
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getstack
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>db_setmetatable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ldblib.o(i.db_setmetatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = db_setmetatable &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setmetatable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>db_setupvalue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ldblib.o(i.db_setupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = db_setupvalue &rArr; auxupvalue &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxupvalue
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>db_setuservalue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldblib.o(i.db_setuservalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = db_setuservalue &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setuservalue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>db_traceback</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ldblib.o(i.db_traceback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864<LI>Call Chain = db_traceback &rArr; luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getthread
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>db_upvalueid</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ldblib.o(i.db_upvalueid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = db_upvalueid &rArr; checkupval &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvalueid
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlightuserdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>db_upvaluejoin</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ldblib.o(i.db_upvaluejoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = db_upvaluejoin &rArr; checkupval &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkupval
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_upvaluejoin
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_iscfunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldblib.o(.constdata)
</UL>
<P><STRONG><a name="[4de]"></a>getthread</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ldblib.o(i.getthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getthread &rArr; lua_type
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tothread
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_traceback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_setlocal
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_sethook
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getlocal
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_gethook
</UL>

<P><STRONG><a name="[95]"></a>hookf</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ldblib.o(i.hookf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = hookf &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushthread
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ldblib.o(i.db_gethook)
<LI> ldblib.o(i.db_sethook)
</UL>
<P><STRONG><a name="[4eb]"></a>settabsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldblib.o(i.settabsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = settabsb &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[4ea]"></a>settabsi</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldblib.o(i.settabsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = settabsi &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[4e9]"></a>settabss</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ldblib.o(i.settabss))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = settabss &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[4ec]"></a>treatstackoption</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ldblib.o(i.treatstackoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = treatstackoption &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_xmove
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_getinfo
</UL>

<P><STRONG><a name="[439]"></a>auxgetinfo</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ldebug.o(i.auxgetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = auxgetinfo &rArr; funcnamefromcode &rArr; getobjname &rArr; findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcinfo
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[4ac]"></a>collectvalidlines</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, ldebug.o(i.collectvalidlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = collectvalidlines &rArr; luaH_setint &rArr; luaH_newkey &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[43b]"></a>currentline</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ldebug.o(i.currentline))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = currentline
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[4d3]"></a>currentpc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ldebug.o(i.currentpc))
<BR><BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlocal
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentline
</UL>

<P><STRONG><a name="[57b]"></a>filterpc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ldebug.o(i.filterpc))
<BR><BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
</UL>

<P><STRONG><a name="[578]"></a>findlocal</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ldebug.o(i.findlocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = findlocal &rArr; luaF_getlocalname
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
</UL>

<P><STRONG><a name="[57a]"></a>findsetreg</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ldebug.o(i.findsetreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterpc
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[43a]"></a>funcinfo</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ldebug.o(i.funcinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = funcinfo &rArr; luaO_chunkid
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_chunkid
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[43c]"></a>funcnamefromcode</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ldebug.o(i.funcnamefromcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = funcnamefromcode &rArr; getobjname &rArr; findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxgetinfo
</UL>

<P><STRONG><a name="[596]"></a>getobjname</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, ldebug.o(i.getobjname))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getobjname &rArr; findsetreg
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_getlocalname
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findsetreg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kname
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcnamefromcode
</UL>

<P><STRONG><a name="[5b0]"></a>kname</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ldebug.o(i.kname))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = kname &rArr;  getobjname (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>
<BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[651]"></a>swapextra</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ldebug.o(i.swapextra))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swapextra
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setlocal
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getlocal
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getinfo
</UL>

<P><STRONG><a name="[5af]"></a>upvalname</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldebug.o(i.upvalname))
<BR><BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;varinfo
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
</UL>

<P><STRONG><a name="[60d]"></a>varinfo</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ldebug.o(i.varinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = varinfo &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upvalname
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getobjname
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currentpc
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_typeerror
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_tointerror
</UL>

<P><STRONG><a name="[47e]"></a>checkmode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ldo.o(i.checkmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = checkmode &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_parser
</UL>

<P><STRONG><a name="[a2]"></a>f_parser</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ldo.o(i.f_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = f_parser &rArr; luaY_parser &rArr; statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_initupvals
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkmode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.luaD_protectedparser)
</UL>
<P><STRONG><a name="[57c]"></a>finishCcall</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ldo.o(i.finishCcall))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = finishCcall &rArr; luaD_poscall &rArr; luaD_hook &rArr; luaD_growstack &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>

<P><STRONG><a name="[5fc]"></a>moveresults</STRONG> (Thumb, 158 bytes, Stack size 28 bytes, ldo.o(i.moveresults))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = moveresults
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
</UL>

<P><STRONG><a name="[ab]"></a>resume</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ldo.o(i.resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = resume &rArr; unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_precall
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_poscall
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unroll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[659]"></a>resume_error</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ldo.o(i.resume_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = resume_error &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
</UL>

<P><STRONG><a name="[5fa]"></a>seterrorobj</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ldo.o(i.seterrorobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = seterrorobj &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_resume
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>

<P><STRONG><a name="[ac]"></a>unroll</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ldo.o(i.unroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = unroll &rArr; luaV_finishOp &rArr; luaV_concat &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_finishOp
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finishCcall
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ldo.o(i.lua_resume)
</UL>
<P><STRONG><a name="[265]"></a>DumpBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ldump.o(i.DumpBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>

<P><STRONG><a name="[264]"></a>DumpByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ldump.o(i.DumpByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[266]"></a>DumpConstants</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ldump.o(i.DumpConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DumpConstants &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[26b]"></a>DumpDebug</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ldump.o(i.DumpDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[26c]"></a>DumpFunction</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, ldump.o(i.DumpFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DumpFunction &rArr; DumpDebug &rArr; DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpString
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[26e]"></a>DumpHeader</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ldump.o(i.DumpHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpHeader &rArr; DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpNumber
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInteger
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_dump
</UL>

<P><STRONG><a name="[267]"></a>DumpInt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, ldump.o(i.DumpInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DumpInt &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpProtos
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[269]"></a>DumpInteger</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ldump.o(i.DumpInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DumpInteger &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[268]"></a>DumpNumber</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ldump.o(i.DumpNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DumpNumber &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpHeader
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[26d]"></a>DumpProtos</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ldump.o(i.DumpProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = DumpProtos &rArr;  DumpFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpInt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
</UL>

<P><STRONG><a name="[26a]"></a>DumpString</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ldump.o(i.DumpString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DumpString &rArr; DumpByte &rArr; DumpBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpByte
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpFunction
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpDebug
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpConstants
</UL>

<P><STRONG><a name="[273]"></a>GCTM</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, lgc.o(i.GCTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettmbyobj
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_pcall
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
</UL>

<P><STRONG><a name="[428]"></a>atomic</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lgc.o(i.atomic))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = atomic &rArr; convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_clearcache
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;separatetobefnz
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[430]"></a>clearkeys</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lgc.o(i.clearkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = clearkeys &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[42d]"></a>clearvalues</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lgc.o(i.clearvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = clearvalues &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[42c]"></a>convergeephemerons</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lgc.o(i.convergeephemerons))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = convergeephemerons &rArr; propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[89]"></a>dothecall</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lgc.o(i.dothecall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = dothecall &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_callnoyield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lgc.o(i.GCTM)
</UL>
<P><STRONG><a name="[51f]"></a>entersweep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lgc.o(i.entersweep))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = entersweep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[58b]"></a>freeobj</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, lgc.o(i.freeobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_remove
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_free
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_freeproto
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvdeccount
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>

<P><STRONG><a name="[48c]"></a>iscleared</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lgc.o(i.iscleared))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>

<P><STRONG><a name="[42f]"></a>markbeingfnz</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lgc.o(i.markbeingfnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = markbeingfnz &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[42a]"></a>markmt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.markmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = markmt &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[42b]"></a>propagateall</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lgc.o(i.propagateall))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = propagateall &rArr; propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[68d]"></a>propagatemark</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lgc.o(i.propagatemark))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = propagatemark &rArr; traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
</UL>

<P><STRONG><a name="[429]"></a>reallymarkobject</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, lgc.o(i.reallymarkobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + In Cycle
<LI>Call Chain = reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversethread
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseproto
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseLclosure
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_upvalbarrier_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>

<P><STRONG><a name="[48d]"></a>removeentry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lgc.o(i.removeentry))
<BR><BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearvalues
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearkeys
</UL>

<P><STRONG><a name="[5f1]"></a>runafewfinalizers</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lgc.o(i.runafewfinalizers))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCTM
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[42e]"></a>separatetobefnz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lgc.o(i.separatetobefnz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = separatetobefnz
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>

<P><STRONG><a name="[5ee]"></a>setpause</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lgc.o(i.setpause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setpause
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_setdebt
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_fullgc
</UL>

<P><STRONG><a name="[5ef]"></a>singlestep</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, lgc.o(i.singlestep))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runafewfinalizers
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagateall
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markmt
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;markbeingfnz
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_runtilstate
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
</UL>

<P><STRONG><a name="[520]"></a>sweeplist</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lgc.o(i.sweeplist))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeobj
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweepstep
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entersweep
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_checkfinalizer
</UL>

<P><STRONG><a name="[6c5]"></a>sweepstep</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lgc.o(i.sweepstep))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sweepstep &rArr; sweeplist &rArr; freeobj &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sweeplist
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlestep
</UL>

<P><STRONG><a name="[68e]"></a>traverseLclosure</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lgc.o(i.traverseLclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = traverseLclosure &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[4c0]"></a>traverseephemeron</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lgc.o(i.traverseephemeron))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convergeephemerons
</UL>

<P><STRONG><a name="[691]"></a>traverseproto</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lgc.o(i.traverseproto))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = traverseproto &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[6d4]"></a>traversestrongtable</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lgc.o(i.traversestrongtable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = traversestrongtable &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[68f]"></a>traversetable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lgc.o(i.traversetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = traversetable &rArr; traverseephemeron &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_gettm
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseweakvalue
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversestrongtable
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traverseephemeron
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[690]"></a>traversethread</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lgc.o(i.traversethread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = traversethread &rArr; luaD_shrinkstack &rArr;  luaD_reallocstack (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_shrinkstack
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;propagatemark
</UL>

<P><STRONG><a name="[6d5]"></a>traverseweakvalue</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lgc.o(i.traverseweakvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = traverseweakvalue &rArr; iscleared &rArr; reallymarkobject &rArr;  reallymarkobject (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeentry
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reallymarkobject
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iscleared
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;traversetable
</UL>

<P><STRONG><a name="[432]"></a>aux_close</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.aux_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gc
</UL>

<P><STRONG><a name="[434]"></a>aux_lines</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, liolib.o(i.aux_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = aux_lines &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
</UL>

<P><STRONG><a name="[4ce]"></a>createstdfile</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, liolib.o(i.createstdfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = createstdfile &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_io
</UL>

<P><STRONG><a name="[10b]"></a>f_flush</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, liolib.o(i.f_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = f_flush &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>f_gc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, liolib.o(i.f_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = f_gc &rArr; aux_close &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>f_lines</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, liolib.o(i.f_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = f_lines &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>f_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, liolib.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 10120<LI>Call Chain = f_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>f_seek</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, liolib.o(i.f_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = f_seek &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>f_setvbuf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, liolib.o(i.f_setvbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = f_setvbuf &rArr; luaL_checkoption &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkoption
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>f_tostring</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(i.f_tostring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = f_tostring &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>f_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, liolib.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = f_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[597]"></a>g_iofile</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, liolib.o(i.g_iofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_output
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_input
</UL>

<P><STRONG><a name="[551]"></a>g_read</STRONG> (Thumb, 366 bytes, Stack size 4200 bytes, liolib.o(i.g_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 10112<LI>Call Chain = g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_line
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_readline
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[555]"></a>g_write</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, liolib.o(i.g_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[5ac]"></a>getiofile</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, liolib.o(i.getiofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = getiofile &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_flush
</UL>

<P><STRONG><a name="[100]"></a>io_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(i.io_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = io_close &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>io_fclose</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, liolib.o(i.io_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = io_fclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.newfile)
</UL>
<P><STRONG><a name="[101]"></a>io_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, liolib.o(i.io_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = io_flush &rArr; getiofile &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>io_input</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liolib.o(i.io_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = io_input &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>io_lines</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, liolib.o(i.io_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = io_lines &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tofile
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_lines
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>io_noclose</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, liolib.o(i.io_noclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = io_noclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 2]<UL><LI> liolib.o(i.createstdfile)
<LI> liolib.o(i.io_noclose)
</UL>
<P><STRONG><a name="[104]"></a>io_open</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, liolib.o(i.io_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = io_open &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>io_output</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, liolib.o(i.io_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = io_output &rArr; g_iofile &rArr; tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>io_pclose</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, liolib.o(i.io_pclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = io_pclose &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_execresult
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.io_popen)
</UL>
<P><STRONG><a name="[106]"></a>io_popen</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, liolib.o(i.io_popen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = io_popen &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>io_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, liolib.o(i.io_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 10120<LI>Call Chain = io_read &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>io_readline</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, liolib.o(i.io_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 10144<LI>Call Chain = io_readline &rArr; g_read &rArr; read_line &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aux_close
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(i.aux_lines)
</UL>
<P><STRONG><a name="[108]"></a>io_tmpfile</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, liolib.o(i.io_tmpfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = io_tmpfile &rArr; newfile &rArr; newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_fileresult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>io_type</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, liolib.o(i.io_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = io_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_testudata
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>io_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, liolib.o(i.io_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = io_write &rArr; g_write &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiofile
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> liolib.o(.constdata)
</UL>
<P><STRONG><a name="[5c1]"></a>newfile</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, liolib.o(i.newfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = newfile &rArr; newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newprefile
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opencheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_tmpfile
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_open
</UL>

<P><STRONG><a name="[4cf]"></a>newprefile</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, liolib.o(i.newprefile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_setmetatable
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_popen
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstdfile
</UL>

<P><STRONG><a name="[671]"></a>nextc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, liolib.o(i.nextc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nextc &rArr; getc &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
</UL>

<P><STRONG><a name="[598]"></a>opencheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, liolib.o(i.opencheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = opencheck &rArr; newfile &rArr; newprefile &rArr; luaL_setmetatable &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newfile
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
</UL>

<P><STRONG><a name="[599]"></a>read_line</STRONG> (Thumb, 162 bytes, Stack size 4200 bytes, liolib.o(i.read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 5912<LI>Call Chain = read_line &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawlen
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[59c]"></a>read_number</STRONG> (Thumb, 200 bytes, Stack size 248 bytes, liolib.o(i.read_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = read_number &rArr; lua_stringtonumber &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdigits
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_stringtonumber
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ungetc
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_read
</UL>

<P><STRONG><a name="[6ad]"></a>readdigits</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, liolib.o(i.readdigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = readdigits &rArr; nextc &rArr; getc &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[6ac]"></a>test2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, liolib.o(i.test2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = test2 &rArr; nextc &rArr; getc &rArr; fgetc &rArr; mmc_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_number
</UL>

<P><STRONG><a name="[532]"></a>tofile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, liolib.o(i.tofile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = tofile &rArr; luaL_checkudata &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkudata
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_lines
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_close
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;g_iofile
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_setvbuf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seek
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lines
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_flush
</UL>

<P><STRONG><a name="[477]"></a>check_next1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, llex.o(i.check_next1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_next1 &rArr; luaZ_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[479]"></a>check_next2</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, llex.o(i.check_next2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = check_next2 &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
</UL>

<P><STRONG><a name="[524]"></a>esccheck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, llex.o(i.esccheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
</UL>

<P><STRONG><a name="[5aa]"></a>gethexa</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, llex.o(i.gethexa))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[5b9]"></a>inclinenumber</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llex.o(i.inclinenumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = inclinenumber &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[525]"></a>lexerror</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, llex.o(i.lexerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + In Cycle
<LI>Call Chain = lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_addinfo
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>

<P><STRONG><a name="[5d4]"></a>llex</STRONG> (Thumb, 978 bytes, Stack size 24 bytes, llex.o(i.llex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next1
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
</UL>

<P><STRONG><a name="[5d6]"></a>read_long_string</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, llex.o(i.read_long_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = read_long_string &rArr; luaX_newstring &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[5d8]"></a>read_numeral</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, llex.o(i.read_numeral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = read_numeral &rArr; check_next2 &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[5d7]"></a>read_string</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, llex.o(i.read_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_utf8esc
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inclinenumber
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[6af]"></a>readdecesc</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, llex.o(i.readdecesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = readdecesc &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[6ae]"></a>readutf8esc</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, llex.o(i.readutf8esc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
</UL>

<P><STRONG><a name="[47a]"></a>save</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, llex.o(i.save))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_sep
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readutf8esc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdecesc
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_string
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_numeral
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lexerror
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethexa
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esccheck
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_next2
</UL>

<P><STRONG><a name="[5d5]"></a>skip_sep</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, llex.o(i.skip_sep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = skip_sep &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_fill
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_long_string
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llex
</UL>

<P><STRONG><a name="[113]"></a>math_abs</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lmathlib.o(i.math_abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_abs &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>math_acos</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_acos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>math_asin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_asin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>math_atan</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lmathlib.o(i.math_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = math_atan &rArr; luaL_optnumber &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optnumber
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>math_ceil</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lmathlib.o(i.math_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_ceil &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>math_cos</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_cos &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>math_deg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmathlib.o(i.math_deg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_deg &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>math_exp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_exp &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>math_floor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lmathlib.o(i.math_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_floor &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>math_fmod</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lmathlib.o(i.math_fmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = math_fmod &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>math_log</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lmathlib.o(i.math_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = math_log &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log2
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>math_max</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lmathlib.o(i.math_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = math_max &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>math_min</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lmathlib.o(i.math_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = math_min &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>math_modf</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lmathlib.o(i.math_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = math_modf &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushnumint
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>math_rad</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmathlib.o(i.math_rad))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_rad &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>math_random</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lmathlib.o(i.math_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = math_random &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>math_randomseed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmathlib.o(i.math_randomseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_randomseed &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>math_sin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_sin &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>math_sqrt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_sqrt &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>math_tan</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lmathlib.o(i.math_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = math_tan &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>math_toint</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmathlib.o(i.math_toint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = math_toint &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>math_type</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lmathlib.o(i.math_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = math_type &rArr; luaL_checkany &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkany
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>math_ult</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lmathlib.o(i.math_ult))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = math_ult &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmathlib.o(.constdata)
</UL>
<P><STRONG><a name="[668]"></a>pushnumint</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lmathlib.o(i.pushnumint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pushnumint &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_modf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_floor
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_ceil
</UL>

<P><STRONG><a name="[47d]"></a>checkload</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, loadlib.o(i.checkload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = checkload &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[56b]"></a>findfile</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, loadlib.o(i.findfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 10160<LI>Call Chain = findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Lua
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[574]"></a>findloader</STRONG> (Thumb, 180 bytes, Stack size 4192 bytes, loadlib.o(i.findloader))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_require
</UL>

<P><STRONG><a name="[ad]"></a>gctm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, loadlib.o(i.gctm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = gctm &rArr; luaL_len &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgeti
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(i.luaopen_package)
</UL>
<P><STRONG><a name="[12a]"></a>ll_loadlib</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, loadlib.o(i.ll_loadlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = ll_loadlib &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>ll_require</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, loadlib.o(i.ll_require))
<BR><BR>[Stack]<UL><LI>Max Depth = 5976<LI>Call Chain = ll_require &rArr; findloader &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findloader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>ll_searchpath</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, loadlib.o(i.ll_searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10152<LI>Call Chain = ll_searchpath &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searchpath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[5db]"></a>loadfunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, loadlib.o(i.loadfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5960<LI>Call Chain = loadfunc &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookforfunc
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_Croot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;searcher_C
</UL>

<P><STRONG><a name="[5d3]"></a>lookforfunc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, loadlib.o(i.lookforfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = lookforfunc &rArr; lua_getfield &rArr; auxgetstr &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawgetp
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushboolean
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_loadlib
</UL>

<P><STRONG><a name="[12f]"></a>searcher_C</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, loadlib.o(i.searcher_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 10176<LI>Call Chain = searcher_C &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>searcher_Croot</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, loadlib.o(i.searcher_Croot))
<BR><BR>[Stack]<UL><LI>Max Depth = 10176<LI>Call Chain = searcher_Croot &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadfunc
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>searcher_Lua</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, loadlib.o(i.searcher_Lua))
<BR><BR>[Stack]<UL><LI>Max Depth = 10176<LI>Call Chain = searcher_Lua &rArr; findfile &rArr; searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_loadfilex
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>searcher_preload</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loadlib.o(i.searcher_preload))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = searcher_preload &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loadlib.o(.constdata)
</UL>
<P><STRONG><a name="[56d]"></a>searchpath</STRONG> (Thumb, 224 bytes, Stack size 4192 bytes, loadlib.o(i.searchpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 10128<LI>Call Chain = searchpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_searchpath
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfile
</UL>

<P><STRONG><a name="[65c]"></a>setpath</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, loadlib.o(i.setpath))
<BR><BR>[Stack]<UL><LI>Max Depth = 5968<LI>Call Chain = setpath &rArr; luaL_gsub &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_gsub
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getfield
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaopen_package
</UL>

<P><STRONG><a name="[5ba]"></a>intarith</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lobject.o(i.intarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = intarith &rArr; luaV_mod &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_shiftl
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_mod
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_div
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[5c8]"></a>l_str2d</STRONG> (Thumb, 116 bytes, Stack size 224 bytes, lobject.o(i.l_str2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2dloc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[5ca]"></a>l_str2dloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lobject.o(i.l_str2dloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_str2d
</UL>

<P><STRONG><a name="[5cb]"></a>l_str2int</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lobject.o(i.l_str2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_str2int
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_hexavalue
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_str2num
</UL>

<P><STRONG><a name="[638]"></a>numarith</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, lobject.o(i.numarith))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = numarith &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmod
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_arith
</UL>

<P><STRONG><a name="[63a]"></a>pushstr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lobject.o(i.pushstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + In Cycle
<LI>Call Chain = pushstr &rArr;  luaS_newlstr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_inctop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushvfstring
</UL>

<P><STRONG><a name="[404]"></a>addprototype</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lparser.o(i.addprototype))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = addprototype &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[406]"></a>adjust_assign</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lparser.o(i.adjust_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = adjust_assign &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_nil
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[40b]"></a>adjustlocalvars</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lparser.o(i.adjustlocalvars))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adjustlocalvars
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[40d]"></a>assignment</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, lparser.o(i.assignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + In Cycle
<LI>Call Chain = assignment &rArr;  assignment (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setoneret
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_conflict
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[459]"></a>block</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, lparser.o(i.block))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + In Cycle
<LI>Call Chain = block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
</UL>

<P><STRONG><a name="[5d0]"></a>block_follow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lparser.o(i.block_follow))
<BR><BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[45f]"></a>body</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, lparser.o(i.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + In Cycle
<LI>Call Chain = body &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addprototype
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
</UL>

<P><STRONG><a name="[46c]"></a>check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lparser.o(i.check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = check &rArr; error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>

<P><STRONG><a name="[411]"></a>check_conflict</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lparser.o(i.check_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = check_conflict &rArr; luaK_codeABC &rArr; luaK_code &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[463]"></a>check_match</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lparser.o(i.check_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = check_match &rArr; testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_expected
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[412]"></a>checklimit</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lparser.o(i.checklimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = checklimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[480]"></a>checkname</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lparser.o(i.checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = checkname &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
</UL>

<P><STRONG><a name="[413]"></a>checknext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lparser.o(i.checknext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[465]"></a>close_func</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, lparser.o(i.close_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = close_func &rArr; leaveblock &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_step
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[495]"></a>closegoto</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lparser.o(i.closegoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = closegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>

<P><STRONG><a name="[482]"></a>codestring</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lparser.o(i.codestring))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = codestring &rArr; luaK_stringK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_stringK
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[4af]"></a>cond</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lparser.o(i.cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = cond &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
</UL>

<P><STRONG><a name="[4ba]"></a>constructor</STRONG> (Thumb, 342 bytes, Stack size 80 bytes, lparser.o(i.constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = constructor &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setlist
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_int2fb
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_lookahead
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
</UL>

<P><STRONG><a name="[45a]"></a>enterblock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lparser.o(i.enterblock))
<BR><BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_func
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[51e]"></a>enterlevel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lparser.o(i.enterlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = enterlevel &rArr; checklimit &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[46d]"></a>error_expected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lparser.o(i.error_expected))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = error_expected &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_token2str
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>

<P><STRONG><a name="[526]"></a>exp1</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, lparser.o(i.exp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
</UL>

<P><STRONG><a name="[414]"></a>explist</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lparser.o(i.explist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + In Cycle
<LI>Call Chain = explist &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[4b0]"></a>expr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lparser.o(i.expr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listfield
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
</UL>

<P><STRONG><a name="[561]"></a>fieldsel</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, lparser.o(i.fieldsel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = fieldsel &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[56e]"></a>findgotos</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lparser.o(i.findgotos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = findgotos &rArr; closegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[572]"></a>findlabel</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lparser.o(i.findlabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[580]"></a>forbody</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, lparser.o(i.forbody))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABx
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[584]"></a>forlist</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, lparser.o(i.forlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = forlist &rArr; forbody &rArr; block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_checkstack
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[587]"></a>fornum</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lparser.o(i.fornum))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_intK
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codek
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp1
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
</UL>

<P><STRONG><a name="[588]"></a>forstat</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lparser.o(i.forstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[594]"></a>funcargs</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, lparser.o(i.funcargs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = funcargs &rArr; constructor &rArr; recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
</UL>

<P><STRONG><a name="[6d1]"></a>getbinopr</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, lparser.o(i.getbinopr))
<BR><BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[40c]"></a>getlocvar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lparser.o(i.getlocvar))
<BR><BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>

<P><STRONG><a name="[5b6]"></a>gotostat</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lparser.o(i.gotostat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = gotostat &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[415]"></a>init_exp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lparser.o(i.init_exp))
<BR><BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[5cd]"></a>labelstat</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lparser.o(i.labelstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = labelstat &rArr; checknext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[45c]"></a>leaveblock</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lparser.o(i.leaveblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = leaveblock &rArr; findlabel &rArr; closegoto &rArr; luaK_patchlist &rArr; patchlistaux &rArr; fixjump &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_new
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newlabelentry
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findlabel
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findgotos
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forbody
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_func
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[4bd]"></a>listfield</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.listfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + In Cycle
<LI>Call Chain = listfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[585]"></a>new_localvar</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lparser.o(i.new_localvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registerlocalvar
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvarliteral_
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
</UL>

<P><STRONG><a name="[461]"></a>new_localvarliteral_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lparser.o(i.new_localvarliteral_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = new_localvarliteral_ &rArr; new_localvar &rArr; registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_newstring
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[5b7]"></a>newlabelentry</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lparser.o(i.newlabelentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 1544<LI>Call Chain = newlabelentry &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
</UL>

<P><STRONG><a name="[64e]"></a>newupvalue</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lparser.o(i.newupvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = newupvalue &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
</UL>

<P><STRONG><a name="[460]"></a>open_func</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lparser.o(i.open_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_func
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[462]"></a>parlist</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lparser.o(i.parlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = parlist &rArr; str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_reserveregs
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>

<P><STRONG><a name="[4bf]"></a>recfield</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, lparser.o(i.recfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816 + In Cycle
<LI>Call Chain = recfield &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2RK
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checklimit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
</UL>

<P><STRONG><a name="[670]"></a>registerlocalvar</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lparser.o(i.registerlocalvar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = registerlocalvar &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_growaux_
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_barrier_
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
</UL>

<P><STRONG><a name="[6b1]"></a>repeatstat</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, lparser.o(i.repeatstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + In Cycle
<LI>Call Chain = repeatstat &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchclose
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[6b3]"></a>retstat</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lparser.o(i.retstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = retstat &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_setreturns
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_ret
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyreg
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[496]"></a>semerror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lparser.o(i.semerror))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undefgoto
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closegoto
</UL>

<P><STRONG><a name="[6c4]"></a>simpleexp</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lparser.o(i.simpleexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = simpleexp &rArr; suffixedexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_codeABC
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
</UL>

<P><STRONG><a name="[6c6]"></a>singlevar</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, lparser.o(i.singlevar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = singlevar &rArr; luaK_indexed &rArr; luaK_exp2RK &rArr; luaK_exp2val &rArr; luaK_exp2anyreg &rArr; luaK_exp2nextreg &rArr; exp2reg &rArr; discharge2reg &rArr; luaK_intK &rArr; addk &rArr; luaM_growaux_ &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codestring
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[6c7]"></a>singlevaraux</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lparser.o(i.singlevaraux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + In Cycle
<LI>Call Chain = singlevaraux &rArr;  singlevaraux (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newupvalue
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_exp
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevaraux
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
</UL>

<P><STRONG><a name="[5cf]"></a>skipnoopstat</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lparser.o(i.skipnoopstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = skipnoopstat &rArr;  statement (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>
<BR>[Called By]<UL><LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
</UL>

<P><STRONG><a name="[6c8]"></a>statement</STRONG> (Thumb, 722 bytes, Stack size 80 bytes, lparser.o(i.statement))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_storevar
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchlist
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_getlabel
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_fixline
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testnext
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_checkname
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_localvar
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labelstat
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getlocvar
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cond
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustlocalvars
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
</UL>

<P><STRONG><a name="[45b]"></a>statlist</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lparser.o(i.statlist))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = statlist &rArr; statement &rArr; forstat &rArr; fornum &rArr; exp1 &rArr; expr &rArr; subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaY_parser
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_then_block
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeatstat
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block
</UL>

<P><STRONG><a name="[481]"></a>str_checkname</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lparser.o(i.str_checkname))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = str_checkname &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forstat
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
</UL>

<P><STRONG><a name="[52c]"></a>subexpr</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, lparser.o(i.subexpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088 + In Cycle
<LI>Call Chain = subexpr &rArr;  subexpr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_prefix
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_posfix
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_infix
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getbinopr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterlevel
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subexpr
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
</UL>

<P><STRONG><a name="[410]"></a>suffixedexp</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, lparser.o(i.suffixedexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + In Cycle
<LI>Call Chain = suffixedexp &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_syntaxerror
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_self
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_indexed
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2nextreg
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2anyregup
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_dischargevars
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yindex
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlevar
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;funcargs
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fieldsel
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkname
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleexp
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[6ca]"></a>test_then_block</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, lparser.o(i.test_then_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + In Cycle
<LI>Call Chain = test_then_block &rArr;  statlist (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_patchtohere
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_jump
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiftrue
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_goiffalse
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_concat
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statlist
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipnoopstat
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterblock
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_follow
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
</UL>

<P><STRONG><a name="[40f]"></a>testnext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lparser.o(i.testnext))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = testnext &rArr; luaX_next &rArr; llex &rArr; read_string &rArr; readutf8esc &rArr; gethexa &rArr; esccheck &rArr; save &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statement
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retstat
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parlist
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gotostat
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fornum
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forlist
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explist
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constructor
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_match
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment
</UL>

<P><STRONG><a name="[5d1]"></a>undefgoto</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lparser.o(i.undefgoto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = undefgoto &rArr; semerror &rArr; luaX_syntaxerror &rArr; lexerror &rArr;  save (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semerror
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaveblock
</UL>

<P><STRONG><a name="[6b0]"></a>yindex</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lparser.o(i.yindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + In Cycle
<LI>Call Chain = yindex &rArr;  expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaK_exp2val
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_next
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checknext
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffixedexp
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recfield
</UL>

<P><STRONG><a name="[491]"></a>close_state</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lstate.o(i.close_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = close_state &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_freeallobjects
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_close
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freestack
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_close
</UL>

<P><STRONG><a name="[a9]"></a>f_luaopen</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lstate.o(i.f_luaopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = f_luaopen &rArr; luaX_init &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_setint
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_version
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaX_init
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaT_init
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_init
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstate.o(i.lua_newstate)
</UL>
<P><STRONG><a name="[494]"></a>freestack</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lstate.o(i.freestack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = freestack &rArr;  luaM_realloc_ (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freeCI
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaE_freethread
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_state
</UL>

<P><STRONG><a name="[657]"></a>makeseed</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lstate.o(i.makeseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = makeseed &rArr; luaS_hash
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[656]"></a>preinit_thread</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lstate.o(i.preinit_thread))
<BR><BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newstate
</UL>

<P><STRONG><a name="[538]"></a>stack_init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lstate.o(i.stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = stack_init &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newthread
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_luaopen
</UL>

<P><STRONG><a name="[4d1]"></a>createstrobj</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lstring.o(i.createstrobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaC_newobj
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internshrstr
</UL>

<P><STRONG><a name="[5be]"></a>internshrstr</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lstring.o(i.internshrstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = internshrstr &rArr; createstrobj &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_resize
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createstrobj
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hash
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
</UL>

<P><STRONG><a name="[3df]"></a>add_s</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, lstrlib.o(i.add_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[3e9]"></a>add_value</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lstrlib.o(i.add_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = add_value &rArr; add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettable
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
</UL>

<P><STRONG><a name="[3fa]"></a>addlenmod</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lstrlib.o(i.addlenmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = addlenmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[3fb]"></a>addliteral</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, lstrlib.o(i.addliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = addliteral &rArr; addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tonumberx
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isinteger
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addquoted
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[3fd]"></a>addquoted</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lstrlib.o(i.addquoted))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addstring
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
</UL>

<P><STRONG><a name="[488]"></a>classend</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lstrlib.o(i.classend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = classend &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[6ce]"></a>copywithendian</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lstrlib.o(i.copywithendian))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copywithendian
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[5a7]"></a>getdetails</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lstrlib.o(i.getdetails))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = getdetails &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[5ae]"></a>getnum</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, lstrlib.o(i.getnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
</UL>

<P><STRONG><a name="[5ad]"></a>getnumlimit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lstrlib.o(i.getnumlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = getnumlimit &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getoption
</UL>

<P><STRONG><a name="[5a8]"></a>getoption</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lstrlib.o(i.getoption))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = getoption &rArr; getnumlimit &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnumlimit
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>

<P><STRONG><a name="[136]"></a>gmatch</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lstrlib.o(i.gmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = gmatch &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_newuserdata
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>gmatch_aux</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lstrlib.o(i.gmatch_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = gmatch_aux &rArr; match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_touserdata
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.gmatch)
</UL>
<P><STRONG><a name="[6cd]"></a>initheader</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lstrlib.o(i.initheader))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_packsize
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[5b5]"></a>match</STRONG> (Thumb, 592 bytes, Stack size 32 bytes, lstrlib.o(i.match))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + In Cycle
<LI>Call Chain = match &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;classend
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_capture
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
</UL>

<P><STRONG><a name="[665]"></a>match_class</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, lstrlib.o(i.match_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
</UL>

<P><STRONG><a name="[663]"></a>matchbracketclass</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lstrlib.o(i.matchbracketclass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[664]"></a>max_expand</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.max_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = max_expand &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singlematch
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[686]"></a>packint</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lstrlib.o(i.packint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744<LI>Call Chain = packint &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_pack
</UL>

<P><STRONG><a name="[6cb]"></a>posrelat</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lstrlib.o(i.posrelat))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_sub
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_byte
</UL>

<P><STRONG><a name="[5b4]"></a>prepstate</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lstrlib.o(i.prepstate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prepstate
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_gsub
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch
</UL>

<P><STRONG><a name="[3eb]"></a>push_captures</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lstrlib.o(i.push_captures))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = push_captures &rArr; luaL_checkstack &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_onecapture
</UL>
<BR>[Called By]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmatch_aux
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>

<P><STRONG><a name="[3e3]"></a>push_onecapture</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lstrlib.o(i.push_onecapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = push_onecapture &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_s
</UL>

<P><STRONG><a name="[6bd]"></a>scanformat</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lstrlib.o(i.scanformat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = scanformat &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_format
</UL>

<P><STRONG><a name="[662]"></a>singlematch</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lstrlib.o(i.singlematch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = singlematch &rArr; matchbracketclass &rArr; match_class
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matchbracketclass
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_class
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_expand
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[661]"></a>start_capture</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lstrlib.o(i.start_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + In Cycle
<LI>Call Chain = start_capture &rArr;  match (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
</UL>

<P><STRONG><a name="[131]"></a>str_byte</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lstrlib.o(i.str_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = str_byte &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>str_char</STRONG> (Thumb, 98 bytes, Stack size 4192 bytes, lstrlib.o(i.str_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 5952<LI>Call Chain = str_char &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>str_dump</STRONG> (Thumb, 82 bytes, Stack size 4176 bytes, lstrlib.o(i.str_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = str_dump &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>str_find</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.str_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = str_find &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[6cc]"></a>str_find_aux</STRONG> (Thumb, 384 bytes, Stack size 344 bytes, lstrlib.o(i.str_find_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_captures
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_match
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find
</UL>

<P><STRONG><a name="[135]"></a>str_format</STRONG> (Thumb, 584 bytes, Stack size 4208 bytes, lstrlib.o(i.str_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = str_format &rArr; addliteral &rArr; addquoted &rArr; luaL_addstring &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_tolstring
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanformat
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addliteral
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addlenmod
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>str_gsub</STRONG> (Thumb, 348 bytes, Stack size 4456 bytes, lstrlib.o(i.str_gsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 6288<LI>Call Chain = str_gsub &rArr; add_value &rArr; add_s &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepstate
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>str_len</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lstrlib.o(i.str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = str_len &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>str_lower</STRONG> (Thumb, 72 bytes, Stack size 4184 bytes, lstrlib.o(i.str_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = str_lower &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>str_match</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lstrlib.o(i.str_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 2128<LI>Call Chain = str_match &rArr; str_find_aux &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_find_aux
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>str_pack</STRONG> (Thumb, 684 bytes, Stack size 4264 bytes, lstrlib.o(i.str_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 6024<LI>Call Chain = str_pack &rArr; luaL_checknumber &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_prepbuffsize
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checknumber
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packint
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>str_packsize</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, lstrlib.o(i.str_packsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = str_packsize &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>str_rep</STRONG> (Thumb, 210 bytes, Stack size 4200 bytes, lstrlib.o(i.str_rep))
<BR><BR>[Stack]<UL><LI>Max Depth = 5976<LI>Call Chain = str_rep &rArr; luaL_optlstring &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>str_reverse</STRONG> (Thumb, 68 bytes, Stack size 4176 bytes, lstrlib.o(i.str_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 5928<LI>Call Chain = str_reverse &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>str_sub</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lstrlib.o(i.str_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = str_sub &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>str_unpack</STRONG> (Thumb, 376 bytes, Stack size 104 bytes, lstrlib.o(i.str_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = str_unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnumber
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushlstring
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackint
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posrelat
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initheader
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdetails
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copywithendian
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>str_upper</STRONG> (Thumb, 72 bytes, Stack size 4184 bytes, lstrlib.o(i.str_upper))
<BR><BR>[Stack]<UL><LI>Max Depth = 5936<LI>Call Chain = str_upper &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresultsize
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinitsize
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(.constdata)
</UL>
<P><STRONG><a name="[6cf]"></a>unpackint</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, lstrlib.o(i.unpackint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = unpackint &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_unpack
</UL>

<P><STRONG><a name="[b1]"></a>writer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lstrlib.o(i.writer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = writer &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lstrlib.o(i.str_dump)
</UL>
<P><STRONG><a name="[4c3]"></a>arrayindex</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ltable.o(i.arrayindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>

<P><STRONG><a name="[4c2]"></a>countint</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ltable.o(i.countint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countint &rArr; arrayindex
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rehash
</UL>

<P><STRONG><a name="[56f]"></a>findindex</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ltable.o(i.findindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = findindex &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arrayindex
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_next
</UL>

<P><STRONG><a name="[5a9]"></a>getgeneric</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ltable.o(i.getgeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = getgeneric &rArr; luaV_equalobj &rArr;  luaT_callTM (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_equalobj
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainposition
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_getstr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_get
</UL>

<P><STRONG><a name="[570]"></a>mainposition</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ltable.o(i.mainposition))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mainposition &rArr; __hardfp_frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_hashlongstr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getgeneric
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findindex
</UL>

<P><STRONG><a name="[615]"></a>rehash</STRONG> (Thumb, 228 bytes, Stack size 168 bytes, ltable.o(i.rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = rehash &rArr; luaH_resize &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countint
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_newkey
</UL>

<P><STRONG><a name="[613]"></a>setnodevector</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ltable.o(i.setnodevector))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + In Cycle
<LI>Call Chain = setnodevector &rArr;  luaM_toobig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaG_runerror
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_ceillog2
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_resize
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaH_new
</UL>

<P><STRONG><a name="[3f3]"></a>addfield</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ltablib.o(i.addfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = addfield &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_isstring
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
</UL>

<P><STRONG><a name="[44a]"></a>auxsort</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, ltablib.o(i.auxsort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + In Cycle
<LI>Call Chain = auxsort &rArr;  auxsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[47b]"></a>checkfield</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ltablib.o(i.checkfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = checkfield &rArr; lua_pushstring &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rawget
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushstring
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>

<P><STRONG><a name="[485]"></a>checktab</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ltablib.o(i.checktab))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_getmetatable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkfield
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tremove
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tinsert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tconcat
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort
</UL>

<P><STRONG><a name="[144]"></a>pack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ltablib.o(i.pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = pack &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_setfield
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_createtable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[44d]"></a>partition</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ltablib.o(i.partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = partition &rArr; set2 &rArr; lua_seti &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_comp
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set2
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[44c]"></a>set2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ltablib.o(i.set2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = set2 &rArr; lua_seti &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[148]"></a>sort</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ltablib.o(i.sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = sort &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checktype
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[44b]"></a>sort_comp</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ltablib.o(i.sort_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = sort_comp &rArr; lua_callk &rArr; luaD_callnoyield &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_toboolean
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_callk
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxsort
</UL>

<P><STRONG><a name="[142]"></a>tconcat</STRONG> (Thumb, 166 bytes, Stack size 4192 bytes, ltablib.o(i.tconcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 5984<LI>Call Chain = tconcat &rArr; addfield &rArr; luaL_addvalue &rArr; luaL_addlstring &rArr; luaL_prepbuffsize &rArr; luaL_newmetatable &rArr; lua_setfield &rArr; auxsetstr &rArr; luaV_finishset &rArr; luaG_typeerror &rArr; luaT_objtypename &rArr; luaS_new &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optlstring
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addlstring
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addfield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>tinsert</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ltablib.o(i.tinsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = tinsert &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>tmove</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, ltablib.o(i.tmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = tmove &rArr; checktab &rArr; luaL_checktype &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_compare
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>tremove</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ltablib.o(i.tremove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = tremove &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_seti
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checktab
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>unpack</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ltablib.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = unpack &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_len
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_geti
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_checkstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ltablib.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>LoadBlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lundump.o(i.LoadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaZ_read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>

<P><STRONG><a name="[321]"></a>LoadByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lundump.o(i.LoadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = LoadByte &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[322]"></a>LoadConstants</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lundump.o(i.LoadConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = LoadConstants &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[329]"></a>LoadDebug</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lundump.o(i.LoadDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = LoadDebug &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[32a]"></a>LoadFunction</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lundump.o(i.LoadFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = LoadFunction &rArr; LoadDebug &rArr; LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadString
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
</UL>

<P><STRONG><a name="[323]"></a>LoadInt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lundump.o(i.LoadInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = LoadInt &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUpvalues
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadProtos
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[327]"></a>LoadInteger</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lundump.o(i.LoadInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = LoadInteger &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[326]"></a>LoadNumber</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lundump.o(i.LoadNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = LoadNumber &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[32c]"></a>LoadProtos</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lundump.o(i.LoadProtos))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + In Cycle
<LI>Call Chain = LoadProtos &rArr;  LoadFunction (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newproto
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[328]"></a>LoadString</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, lundump.o(i.LoadString))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = LoadString &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_newlstr
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaS_createlngstrobj
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadDebug
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadConstants
</UL>

<P><STRONG><a name="[32b]"></a>LoadUpvalues</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lundump.o(i.LoadUpvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = LoadUpvalues &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_toobig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaM_realloc_
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFunction
</UL>

<P><STRONG><a name="[46e]"></a>checkHeader</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, lundump.o(i.checkHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = checkHeader &rArr; checkliteral &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNumber
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadInteger
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaU_undump
</UL>

<P><STRONG><a name="[46f]"></a>checkliteral</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lundump.o(i.checkliteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = checkliteral &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[320]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lundump.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaD_throw
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksize
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkliteral
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBlock
</UL>

<P><STRONG><a name="[470]"></a>fchecksize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lundump.o(i.fchecksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = fchecksize &rArr; LoadByte &rArr; LoadBlock &rArr; error &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaO_pushfstring
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHeader
</UL>

<P><STRONG><a name="[149]"></a>byteoffset</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, lutf8lib.o(i.byteoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = byteoffset &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>codepoint</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lutf8lib.o(i.codepoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = codepoint &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkstack
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>iter_aux</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, lutf8lib.o(i.iter_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = iter_aux &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tointegerx
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(i.iter_codes)
</UL>
<P><STRONG><a name="[14d]"></a>iter_codes</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lutf8lib.o(i.iter_codes))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = iter_codes &rArr; luaL_checklstring &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushvalue
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[6a8]"></a>pushutfchar</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lutf8lib.o(i.pushutfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = pushutfchar &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checkinteger
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utfchar
</UL>

<P><STRONG><a name="[46a]"></a>u_posrelat</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lutf8lib.o(i.u_posrelat))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byteoffset
</UL>

<P><STRONG><a name="[4aa]"></a>utf8_decode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lutf8lib.o(i.utf8_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utf8_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utflen
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_aux
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;codepoint
</UL>

<P><STRONG><a name="[14b]"></a>utfchar</STRONG> (Thumb, 80 bytes, Stack size 4184 bytes, lutf8lib.o(i.utfchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 5960<LI>Call Chain = utfchar &rArr; pushutfchar &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_pushresult
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_buffinit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_addvalue
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushutfchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>utflen</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, lutf8lib.o(i.utflen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824<LI>Call Chain = utflen &rArr; luaL_optinteger &rArr; luaL_checkinteger &rArr; tag_error &rArr; typeerror &rArr; luaL_argerror &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_optinteger
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_checklstring
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_argerror
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushnil
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushinteger
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_decode
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_posrelat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lutf8lib.o(.constdata)
</UL>
<P><STRONG><a name="[317]"></a>LEintfloat</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lvm.o(i.LEintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LEintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[31a]"></a>LEnum</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lvm.o(i.LEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LEnum &rArr; LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[31c]"></a>LTintfloat</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lvm.o(i.LTintfloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTnum
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnum
</UL>

<P><STRONG><a name="[31d]"></a>LTnum</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lvm.o(i.LTnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LTnum &rArr; LTintfloat &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTintfloat
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEintfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
</UL>

<P><STRONG><a name="[4c1]"></a>copy2buff</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lvm.o(i.copy2buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copy2buff
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_concat
</UL>

<P><STRONG><a name="[581]"></a>forlimit</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lvm.o(i.forlimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = forlimit &rArr; luaV_tointeger &rArr; luaO_str2num &rArr; l_str2d &rArr; l_str2dloc &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tonumber_
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_tointeger
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[5cc]"></a>l_strcmp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lvm.o(i.l_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_strcmp &rArr; strcoll &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessthan
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_lessequal
</UL>

<P><STRONG><a name="[64b]"></a>pushclosure</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, lvm.o(i.pushclosure))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = pushclosure &rArr; luaF_newLclosure &rArr; luaC_newobj &rArr; luaM_realloc_ &rArr; luaC_fullgc &rArr; luaC_runtilstate &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_newLclosure
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaF_findupval
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaV_execute
</UL>

<P><STRONG><a name="[514]"></a>docall</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lua_test.o(i.docall))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = docall &rArr; lua_pcallk &rArr; luaD_call &rArr;  luaG_runerror (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_rotate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushcclosure
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pcallk
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_gettop
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[5c7]"></a>l_message</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lua_test.o(i.l_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_message &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report
</UL>

<P><STRONG><a name="[97]"></a>laction</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lua_test.o(i.laction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = laction &rArr; lua_sethook
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_test.o(i.docall)
</UL>
<P><STRONG><a name="[9b]"></a>lstop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lua_test.o(i.lstop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = lstop &rArr; luaL_error &rArr; lua_concat &rArr; luaS_newlstr &rArr; luaM_toobig &rArr; luaG_runerror &rArr; luaG_addinfo &rArr; luaO_pushfstring &rArr; luaO_pushvfstring &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_sethook
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_test.o(i.laction)
</UL>
<P><STRONG><a name="[96]"></a>msghandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lua_test.o(i.msghandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848<LI>Call Chain = msghandler &rArr; luaL_traceback &rArr; pushfuncname &rArr; pushglobalfuncname &rArr; findfield &rArr;  findfield (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_traceback
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;luaL_callmeta
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_typename
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_type
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_pushfstring
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lua_test.o(i.docall)
</UL>
<P><STRONG><a name="[655]"></a>print_version</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lua_test.o(i.print_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = print_version &rArr; fwrite &rArr; fputc &rArr; mmc_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
</UL>

<P><STRONG><a name="[515]"></a>report</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lua_test.o(i.report))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = report &rArr; lua_tolstring &rArr; luaC_step &rArr; singlestep &rArr; runafewfinalizers &rArr; GCTM &rArr;  luaO_pushfstring (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_tolstring
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_settop
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_message
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lua_main_test
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_file_script1
</UL>

<P><STRONG><a name="[6fd]"></a>xvprintf</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, xprintf.o(i.xvprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xvprintf &rArr; xputs &rArr; xputc &rArr;  xputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputs
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xputc
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xprintf
</UL>

<P><STRONG><a name="[3c1]"></a>_ath_commit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rw_lib.o(i._ath_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_commit &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c3]"></a>_ath_set_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_bssid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c4]"></a>_ath_set_cipher</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_cipher &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c5]"></a>_ath_set_essid</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c6]"></a>_ath_set_mode</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_mode &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c7]"></a>_ath_set_passphrase</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_passphrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_passphrase &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c8]"></a>_ath_set_pmk</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _ath_set_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3c9]"></a>_ath_set_sec_type</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_sec_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _ath_set_sec_type &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[457]"></a>_check_fd_invaild</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rw_lib.o(i._check_fd_invaild))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[3ca]"></a>_check_sys_params</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rw_lib.o(i._check_sys_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _check_sys_params &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[3cb]"></a>_clean_filename</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rw_lib.o(i._clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>

<P><STRONG><a name="[3d0]"></a>_set_PowerParam</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rw_lib.o(i._set_PowerParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[3d1]"></a>_set_TcpBackoffRetry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rw_lib.o(i._set_TcpBackoffRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _set_TcpBackoffRetry &rArr; custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[3d3]"></a>_set_ap_params</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rw_lib.o(i._set_ap_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
</UL>

<P><STRONG><a name="[3d4]"></a>_set_channel</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rw_lib.o(i._set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _set_channel &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3d5]"></a>_set_ctycode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rw_lib.o(i._set_ctycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = _set_ctycode &rArr; _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3d6]"></a>_set_power</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _set_power &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[3d7]"></a>_set_scan</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rw_lib.o(i._set_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _set_scan &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[3d8]"></a>_set_str_pmk</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, rw_lib.o(i._set_str_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ascii_to_hex
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[206]"></a>ClearDriverContextPtr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cust_api_init.o(i.ClearDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[209]"></a>SetDriverContextPtr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_api_init.o(i.SetDriverContextPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetDriverContextPtr &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[519]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[51a]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[197]"></a>Install_static_wep_keys</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_ioctl.o(i.Install_static_wep_keys))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[6c0]"></a>rsn_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.rsn_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[6be]"></a>rsn_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.rsn_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsn_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[1b5]"></a>security_ie_parse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, api_ioctl.o(i.security_ie_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_parse
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_parse
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_cipher_parse
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_auth_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
</UL>

<P><STRONG><a name="[6c1]"></a>wpa_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.wpa_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[6bf]"></a>wpa_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.wpa_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[84]"></a>query_credit_deficit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_txrx.o(i.query_credit_deficit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = query_credit_deficit &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_txrx.o(i.Api_TxGetStatus)
</UL>
<P><STRONG><a name="[250]"></a>Driver_SetAddressWindowRegister</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, driver_diag.o(i.Driver_SetAddressWindowRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>

<P><STRONG><a name="[1f9]"></a>ConnectService</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, driver_init.o(i.ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[231]"></a>Driver_TargReset</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, driver_init.o(i.Driver_TargReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
</UL>

<P><STRONG><a name="[245]"></a>SetupServices</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, driver_init.o(i.SetupServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetupServices &rArr; ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[255]"></a>Driver_PostProcessRequest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver_txrx.o(i.Driver_PostProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[88]"></a>Driver_TxComplete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_txrx.o(i.Driver_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Driver_TxComplete &rArr; Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver_txrx.o(i.Driver_SubmitTxRequest)
<LI> driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
</UL>
<P><STRONG><a name="[25c]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>

<P><STRONG><a name="[25d]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>

<P><STRONG><a name="[6e0]"></a>wmi_addba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_addba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_addba_req_event_rx &rArr; Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e2]"></a>wmi_bssInfo_event_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssInfo_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wmi_bssInfo_event_rx &rArr; Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e3]"></a>wmi_connect_event_rx</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wmi_connect_event_rx &rArr; Api_ConnectEvent &rArr; Custom_Api_ConnectEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6ed]"></a>wmi_delba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_delba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wmi_delba_req_event_rx &rArr; Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6f2]"></a>wmi_determine_userPriority</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wmi.o(i.wmi_determine_userPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>

<P><STRONG><a name="[6e5]"></a>wmi_disconnect_event_rx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wmi.o(i.wmi_disconnect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6ef]"></a>wmi_easyconfig_event_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_easyconfig_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wmi_easyconfig_event_rx &rArr; Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e9]"></a>wmi_errorEvent_rx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wmi.o(i.wmi_errorEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wmi_errorEvent_rx &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6eb]"></a>wmi_get_pmk_event_rx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_get_pmk_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_get_pmk_event_rx &rArr; Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e4]"></a>wmi_ready_event_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wmi.o(i.wmi_ready_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wmi_ready_event_rx &rArr; Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e7]"></a>wmi_regDomain_event_rx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wmi.o(i.wmi_regDomain_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_regDomain_event_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RegDomainEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e6]"></a>wmi_rsna_4way_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_rsna_4way_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wmi_rsna_4way_rx &rArr; Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6e8]"></a>wmi_scanComplete_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wmi.o(i.wmi_scanComplete_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = wmi_scanComplete_rx &rArr; Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6f1]"></a>wmi_simple_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wmi.o(i.wmi_simple_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>

<P><STRONG><a name="[6ea]"></a>wmi_statsEvent_rx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wmi.o(i.wmi_statsEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_statsEvent_rx &rArr; Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6ee]"></a>wmi_tkip_micerr_event_rx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wmi.o(i.wmi_tkip_micerr_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = wmi_tkip_micerr_event_rx &rArr; Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[6ec]"></a>wmi_wps_profile_event_rx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_profile_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wmi_wps_profile_event_rx &rArr; Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[85]"></a>Atheros_Driver_Task</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cust_driver_main.o(i.Atheros_Driver_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Atheros_Driver_Task &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_Driver_CreateThread)
</UL>
<P><STRONG><a name="[86]"></a>Custom_FreeRxRequest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_main.o(i.Custom_FreeRxRequest))
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_GetRxRequest)
</UL>
<P><STRONG><a name="[192]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[193]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[23c]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_main.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[23d]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_main.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[1f7]"></a>ConfigureByteSwap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_hcd.o(i.ConfigureByteSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigureByteSwap &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[227]"></a>DoDMAOp</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, spi_hcd.o(i.DoDMAOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DoDMAOp &rArr; EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[22d]"></a>DoPioReadInternal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioReadInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[1f8]"></a>DoPioWriteInternal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioWriteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[22b]"></a>EnableDisableSPIIRQHwDetect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spi_hcd.o(i.EnableDisableSPIIRQHwDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EnableDisableSPIIRQHwDetect &rArr; HW_EnableDisableSPIIRQ &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[30f]"></a>HandleExternalReadDone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.HandleExternalReadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[22a]"></a>Hcd_TransferData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[228]"></a>MaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.MaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = MaskSPIInterrupts &rArr;  Hcd_UnmaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[310]"></a>ResetWriteBufferWaterMark</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_hcd.o(i.ResetWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
</UL>

<P><STRONG><a name="[30e]"></a>Htc_DistributeCredits</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, htc.o(i.Htc_DistributeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[313]"></a>Htc_ProcessCreditRpt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, htc.o(i.Htc_ProcessCreditRpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
</UL>

<P><STRONG><a name="[315]"></a>Htc_ProcessTrailer</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, htc.o(i.Htc_ProcessTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[1fe]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[1ff]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[1fd]"></a>fill_scan_info</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, cust_api_wmi_rx.o(i.fill_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[3cc]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[398]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[3ce]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3cd]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[91]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[169]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[171]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
